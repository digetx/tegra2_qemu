/*
 * ARM NVIDIA Tegra2 emulation.
 *
 * Copyright (c) 2014-2015 Dmitry Osipenko <digetx@gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/* Autogenerated from TRM v02p */

#ifndef TEGRA_CAR_H
#define TEGRA_CAR_H

#define RST_SOURCE_OFFSET 0x0
#define RST_SOURCE_RESET  0x00000000
#define RST_SOURCE_WRMASK 0xFFFFC0FF
typedef union rst_source_u {
    struct {
        unsigned int wdt_cpu_rst_en:1;      /* Enable Watch Dog Timer reset for CPU */
        unsigned int wdt_cop_rst_en:1;      /* Enable Watch Dog Timer reset for COP */
        unsigned int wdt_sys_rst_en:1;      /* Enable Watch Dog Timer reset for system */
        unsigned int undefined_bit_3:1;
        unsigned int wdt_sel:1;             /* Watch Dog Timer Select */
        unsigned int wdt_en:1;              /* Enable Watch Dog Timer (Dead Man Timer)  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_6_7:2;
        unsigned int wdt_cpu_rst_sta:1;     /* CPU reset by watch dog timer (RO) */
        unsigned int swr_cpu_rst_sta:1;     /* CPU reset by SW (RO) */
        unsigned int wdt_cop_rst_sta:1;     /* COP reset by watch dog timer (RO) */
        unsigned int swr_cop_rst_sta:1;     /* COP reset by SW (RO) */
        unsigned int wdt_sys_rst_sta:1;     /* System reset by watch dog timer (RO) */
        unsigned int swr_sys_rst_sta:1;     /* System reset by SW (RO) */
        unsigned int undefined_bits_14_31:18;
    };

    uint32_t reg32;
} rst_source_t;

#define RST_DEVICES_L_OFFSET 0x4
#define RST_DEVICES_L_RESET  0x3FFFFEC9
typedef union rst_devices_l_u {
    struct {
        unsigned int swr_cpu_rst:1;         /* Write 1 to force CPU Reset Signal. SW needs to clear this bit when done. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_cop_rst:1;         /* Write 1 to force COP Reset Signal. SW needs to clear this bit when done. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_trig_sys_rst:1;    /* Write 1 to pulse System Reset Signal. HW clears this bit 0 = DISABLE 1 = ENABLE */
        unsigned int swr_ac97_rst:1;        /* Reset AC97 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_rtc_rst:1;         /* Reset RTC Controller */
        unsigned int swr_tmr_rst:1;         /* Reset Timer Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_uart1_rst:1;       /* Reset UART1 Controller  0 = DISABLE 1 = ENABLE */
        unsigned int swr_uart2_rst:1;       /* Reset UART2/VFIR Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_gpio_rst:1;        /* Reset GPIO Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sdmmc2_rst:1;      /* Reset SDMMC2 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_spdif_rst:1;       /* Reset SPDIF Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_i2s1_rst:1;        /* Reset I2S 1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_i2c1_rst:1;        /* Reset I2C1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_ndflash_rst:1;     /* Reset NAND flash controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sdmmc1_rst:1;      /* Reset SDMMC1 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sdmmc4_rst:1;      /* Reset SDMMC4 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_twc_rst:1;         /* Reset Three Wire Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_pwm_rst:1;         /* Reset Pulse Width Modulator 0 = DISABLE 1 = ENABLE */
        unsigned int swr_i2s2_rst:1;        /* Reset I2S 2 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_epp_rst:1;         /* Reset EPP controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_vi_rst:1;          /* Reset VI controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_2d_rst:1;          /* Reset 2D graphics engine controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_usbd_rst:1;        /* Reset USB controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_isp_rst:1;         /* Reset ISP controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_3d_rst:1;          /* Reset 3D controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_ide_rst:1;         /* Reset IDE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_disp2_rst:1;       /* Reset DISP2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_disp1_rst:1;       /* Reset DISP1 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_host1x_rst:1;      /* Reset HOST1X. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_vcp_rst:1;         /* Reset vector co-processor. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_30:1;
        unsigned int swr_cache2_rst:1;      /* Reset COP cache controller. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} rst_devices_l_t;

#define RST_DEVICES_H_OFFSET 0x8
#define RST_DEVICES_H_RESET  0xFEFFFB77
typedef union rst_devices_h_u {
    struct {
        unsigned int swr_mem_rst:1;         /* Reset MC. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_ahbdma_rst:1;      /* Reset AHB-DMA. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_apbdma_rst:1;      /* Reset APB-DMA. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_3:1;
        unsigned int swr_kbc_rst:1;         /* Reset Keyboard controller. */
        unsigned int swr_stat_mon_rst:1;    /* Reset statistic monitor 0 = DISABLE 1 = ENABLE */
        unsigned int swr_pmc_rst:1;         /* Reset PMC controller. */
        unsigned int swr_fuse_rst:1;        /* Reset Fuse controller. */
        unsigned int swr_kfuse_rst:1;       /* Reset KFuse controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sbc1_rst:1;        /* Reset SBC 1 (SPI 1) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_snor_rst:1;        /* Reset NOR Flash Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_spi1_rst:1;        /* Reset SPI 1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sbc2_rst:1;        /* Reset SBC 2 (SPI 2) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_xio_rst:1;         /* Reset XIO controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sbc3_rst:1;        /* Reset SBC 3 (SPI 3) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_dvc_i2c_rst:1;     /* Reset DVC-I2C Controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_dsi_rst:1;         /* Reset DSI controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_tvo_rst:1;         /* Reset TVO/CVE controller 0 = DISABLE 1 = ENABLE */
        unsigned int swr_mipi_rst:1;        /* Reset MIPI base-band controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_hdmi_rst:1;        /* Reset HDMI 0 = DISABLE 1 = ENABLE */
        unsigned int swr_csi_rst:1;         /* Reset CSI controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_tvdac_rst:1;       /* Reset TVDAC controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_i2c2_rst:1;        /* Reset I2C 2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_uart3_rst:1;       /* Reset UART3 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_24:1;
        unsigned int swr_emc_rst:1;         /* Reset EMC controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_usb2_rst:1;        /* Reset USB2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_usb3_rst:1;        /* Reset USB3 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_mpe_rst:1;         /* Reset MPE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_vde_rst:1;         /* Reset VDE & BSEV controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_bsea_rst:1;        /* Reset BSEA controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_bsev_rst:1;        /* Reset BSEV controller. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} rst_devices_h_t;

#define RST_DEVICES_U_OFFSET 0xC
#define RST_DEVICES_U_RESET  0x000005FF
typedef union rst_devices_u_u {
    struct {
        unsigned int swr_speedo_rst:1;      /* Reset SPEEDO controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_uart4_rst:1;       /* Reset UART4 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_uart5_rst:1;       /* Reset UART5 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_i2c3_rst:1;        /* Reset I2C3 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sbc4_rst:1;        /* Reset SBC4 (SPI 4) controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_sdmmc3_rst:1;      /* Reset SDMMC3 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_pcie_rst:1;        /* Reset PCIE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_owr_rst:1;         /* Reset OWR controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_afi_rst:1;         /* Reset AFI controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_csite_rst:1;       /* Reset Coresight controller. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_pciexclk_rst:1;    /* Reset PCIEXCLK logic. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_avpucq_rst:1;      /* Reset AVPUCQ logic. 0 = DISABLE 1 = ENABLE */
        unsigned int swr_la_rst:1;          /* Reset LA logic. */
        unsigned int undefined_bits_13_31:19;
    };

    uint32_t reg32;
} rst_devices_u_t;

#define CLK_OUT_ENB_L_OFFSET 0x10
#define CLK_OUT_ENB_L_RESET  0x80000130
typedef union clk_out_enb_l_u {
    struct {
        unsigned int clk_enb_cpu:1;         /* Enable clock to CPU. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_1_2:2;
        unsigned int clk_enb_ac97:1;        /* Enable clock to AC97 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_rtc:1;         /* Enable clock to RTC Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_tmr:1;         /* Enable clock to Timer Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_uart1:1;       /* Enable clock to UART1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_uart2:1;       /* Enable clock to UART2/VFIR Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_gpio:1;        /* Enable clock to GPIO Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sdmmc2:1;      /* Enable clock to SDMMC2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_spdif:1;       /* Enable clock to SPDIF Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_i2s1:1;        /* Enable clock to I2S1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_i2c1:1;        /* Enable clock to I2C1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_ndflash:1;     /* Enable clock to NAND flash controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sdmmc1:1;      /* Enable clock to SDMMC1 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sdmmc4:1;      /* Enable clock to SDMMC4 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_twc:1;         /* Enable clock to 3-Wire Interface Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_pwm:1;         /* Enable clock to PWM (Pulse Width Modulator) 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_i2s2:1;        /* Enable clock to I2S 2 controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_epp:1;         /* Enable clock to EPP controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_vi:1;          /* Enable clock to VI controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_2d:1;          /* Enable clock to 2D graphics engine. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_usbd:1;        /* Enable clock to USB controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_isp:1;         /* Enable clock to ISP controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_3d:1;          /* Enable clock to 3D controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_ide:1;         /* Enable clock to IDE controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_disp2:1;       /* Enable clock to DISP2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_disp1:1;       /* Enable clock to DISP1 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_host1x:1;      /* Enable clock to HOST1X. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_vcp:1;         /* Enable clock to vector co-processor. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_30:1;
        unsigned int clk_enb_cache2:1;      /* Enable clock to COP cache controller. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} clk_out_enb_l_t;

#define CLK_OUT_ENB_H_OFFSET 0x14
#define CLK_OUT_ENB_H_RESET  0x00000480
typedef union clk_out_enb_h_u {
    struct {
        unsigned int clk_enb_mem:1;         /* Enable clock to MC/EMC. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_ahbdma:1;      /* Enable clock to AHB-DMA. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_apbdma:1;      /* Enable clock to APB-DMA. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_3:1;
        unsigned int clk_enb_kbc:1;         /* Enable clock to keyboard controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_stat_mon:1;    /* Enable clock to statistic monitor. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_pmc:1;         /* Enable clock to PMC controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_fuse:1;        /* Enable clock to FUSE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_kfuse:1;       /* Enable clock to KFUSE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sbc1:1;        /* Enable clock to SBC 1 (SPI 1) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_snor:1;        /* Enable clock to NOR Flash Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_spi1:1;        /* Enable clock to SPI 1 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sbc2:1;        /* Enable clock to SBC 2 (SPI 2) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_xio:1;         /* Enable clock to XIO Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sbc3:1;        /* Enable clock to SBC 3 (SPI 3) Controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_dvc_i2c:1;     /* Enable clock to DVC-I2C Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_dsi:1;         /* Enable clock to DSI controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_tvo:1;         /* Enable clock to TVO/CVE controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_mipi:1;        /* Enable clock to MIPI base-band controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_hdmi:1;        /* Enable clock to HDMI 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_csi:1;         /* Enable clock to CSI controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_tvdac:1;       /* Enable clock to TVDAC controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_i2c2:1;        /* Enable clock to I2C2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_uart3:1;       /* Enable clock to UART3 Controller 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_24:1;
        unsigned int clk_enb_emc:1;         /* Enable clock to EMC controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_usb2:1;        /* Enable clock to USB2 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_usb3:1;        /* Enable clock to USB3 controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_mpe:1;         /* Enable clock to MPE controller. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_vde:1;         /* Enable clock to VDE Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_bsea:1;        /* Enable clock to BSEA Controller 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_bsev:1;        /* Enable clock to BSEV Controller. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} clk_out_enb_h_t;

#define CLK_OUT_ENB_U_OFFSET 0x18
#define CLK_OUT_ENB_U_RESET  0x07F00A00
typedef union clk_out_enb_u_u {
    struct {
        unsigned int clk_enb_speedo:1;      /* Enable clock to SPEEDO. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_uart4:1;       /* Enable clock to UART4. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_uart5:1;       /* Enable clock to UART5. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_i2c3:1;        /* Enable clock to I2C3. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sbc4:1;        /* Enable clock to SBC4 (SPI 4). 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_sdmmc3:1;      /* Enable clock to SDMMC3. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_pcie:1;        /* Enable clock to PCIE. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_owr:1;         /* Enable clock to OWR. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_afi:1;         /* Enable clock to AFI. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_csite:1;       /* Enable clock to Coresight. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_10:1;
        unsigned int clk_enb_avpucq:1;      /* Enable clock to AVPUCQ. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_la:1;          /* Enable clock to LA. */
        unsigned int undefined_bits_13_19:7;
        unsigned int clk_enb_irama:1;       /* Enable IRAMB clk. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_iramb:1;       /* Enable IRAMB clk. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_iramc:1;       /* Enable IRAMC clk. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_iramd:1;       /* Enable IRAMD clk. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_cram2:1;       /* Enable COP cache ram clk. 0 = DISABLE 1 = ENABLE */
        unsigned int sync_clk_doubler_enb:1;/* Enable audio sync clk doubler. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_m_doubler_enb:1;   /* Enable CLK_M clk doubler. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_27:1;
        unsigned int clk_enb_sus_out:1;     /* Enable clock to SUS pad. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_dev2_out:1;    /* Enable clock to DEV2 pad. 0 = DISABLE 1 = ENABLE */
        unsigned int clk_enb_dev1_out:1;    /* Enable clock to DEV1 pad. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} clk_out_enb_u_t;

#define CCLK_BURST_POLICY_OFFSET 0x20
#define CCLK_BURST_POLICY_RESET  0x10000000
typedef union cclk_burst_policy_u {
    struct {
        unsigned int cwakeup_idle_source:4; /* Same definitions as CWAKEUP_FIQ 0 = CLKM 1 = PLLC_OUT0 2 = CLKS 3 = PLLM_OUT0 4 = PLLP_OUT0 5 = PLLP_OUT4 6 = PLLP_OUT3 7 = CLKD 8 = PLLX_OUT0 */
        unsigned int cwakeup_run_source:4;  /* Same definitions as CWAKEUP_FIQ_SOURCE 0 = CLKM 1 = PLLC_OUT0 2 = CLKS 3 = PLLM_OUT0 4 = PLLP_OUT0 5 = PLLP_OUT4 6 = PLLP_OUT3 7 = CLKD 8 = PLLX_OUT0 */
        unsigned int cwakeup_irq_source:4;  /* Same definitions as CWAKEUP_FIQ_SOURCE 0 = CLKM 1 = PLLC_OUT0 2 = CLKS 3 = PLLM_OUT0 4 = PLLP_OUT0 5 = PLLP_OUT4 6 = PLLP_OUT3 7 = CLKD 8 = PLLX_OUT0 */
        unsigned int cwakeup_fiq_source:4;  /* 0000 = clk_m, 0001 = pllC_out0, 0010 = clk_s, 0011 = pllM_out0, 0100 = pllP_out0, 0101 = pllP_out4, 0110 = pllP_out3, 0111 = clk_d, 1xxx = PLLX_out0, 0 = CLKM 1 = PLLC_OUT0 2 = CLKS 3 = PLLM_OUT0 4 = PLLP_OUT0 5 = PLLP_OUT4 6 = PLLP_OUT3 7 = CLKD 8 = PLLX_OUT0 */
        unsigned int undefined_bits_16_23:8;
        unsigned int cpu_auto_cwakeup_from_irq:1;/* 0 = NOP ; 1=Burst on CPU IRQ */
        unsigned int cop_auto_cwakeup_from_irq:1;/* 0 = NOP ; 1=Burst on COP IRQ */
        unsigned int cpu_auto_cwakeup_from_fiq:1;/* 0 = NOP ; 1=Burst on CPU FIQ */
        unsigned int cop_auto_cwakeup_from_fiq:1;/* 0 = NOP ; 1=Burst on COP FIQ */
        unsigned int cpu_state:4;           /* 0000=32 kHz Clock source; 0001=IDLE Clock Source; 001X=Run clock source; 01XX=IRQ Clock Source; 1XXX=FIQ Clock Source 0 = STDBY 1 = IDLE 2 = RUN 4 = IRQ 8 = FIQ */
    };

    uint32_t reg32;
} cclk_burst_policy_t;

#define SUPER_CCLK_DIVIDER_OFFSET 0x24
#define SUPER_CCLK_DIVIDER_RESET  0x00000000
typedef union super_cclk_divider_u {
    struct {
        unsigned int super_cdiv_divisor:8;  /* Actual value = n + 1 */
        unsigned int super_cdiv_dividend:8; /* Actual value = n + 1 */
        unsigned int undefined_bits_16_23:8;
        unsigned int super_cdiv_dis_from_cpu_irq:1;/* 0 = enable IRQ, disable IRQ */
        unsigned int super_cdiv_dis_from_cop_irq:1;/* 0 = enable IRQ, disable IRQ */
        unsigned int super_cdiv_dis_from_cpu_fiq:1;/* 0 = enable FIQ, disable FIQ */
        unsigned int super_cdiv_dis_from_cop_fiq:1;/* 0 = enable FIQ, disable FIQ */
        unsigned int undefined_bits_28_30:3;
        unsigned int super_cdiv_enb:1;      /* 0 = disable divider. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} super_cclk_divider_t;

#define SCLK_BURST_POLICY_OFFSET 0x28
#define SCLK_BURST_POLICY_RESET  0x10000000
typedef union sclk_burst_policy_u {
    struct {
        unsigned int swakeup_idle_source:3; /* Same definitions as SWAKEUP_FIQ_SOURCE 0 = CLKM 1 = PLLC_OUT1 2 = PLLP_OUT4 3 = PLLP_OUT3 4 = PLLP_OUT2 5 = CLKD 6 = CLKS 7 = PLLM_OUT1 */
        unsigned int undefined_bit_3:1;
        unsigned int swakeup_run_source:3;  /* Same definitions as SWAKEUP_FIQ_SOURCE 0 = CLKM 1 = PLLC_OUT1 2 = PLLP_OUT4 3 = PLLP_OUT3 4 = PLLP_OUT2 5 = CLKD 6 = CLKS 7 = PLLM_OUT1 */
        unsigned int undefined_bit_7:1;
        unsigned int swakeup_irq_source:3;  /* Same definitions as SWAKEUP_FIQ_SOURCE 0 = CLKM 1 = PLLC_OUT1 2 = PLLP_OUT4 3 = PLLP_OUT3 4 = PLLP_OUT2 5 = CLKD 6 = CLKS 7 = PLLM_OUT1 */
        unsigned int undefined_bit_11:1;
        unsigned int swakeup_fiq_source:3;  /* 000 = clk_m, 001 = pllC_out1, 010 = pllP_out4, 011 = pllP_out3, 100 = pllP_out2, 101 = clk_d, 110 = clk_s, 111 = pllM_out1, 0 = CLKM 1 = PLLC_OUT1 2 = PLLP_OUT4 3 = PLLP_OUT3 4 = PLLP_OUT2 5 = CLKD 6 = CLKS 7 = PLLM_OUT1 */
        unsigned int undefined_bits_15_23:9;
        unsigned int cpu_auto_swakeup_from_irq:1;/* 0 = NOP ; 1=Burst on CPU IRQ */
        unsigned int cop_auto_swakeup_from_irq:1;/* 0 = NOP ; 1=Burst on COP IRQ */
        unsigned int cpu_auto_swakeup_from_fiq:1;/* 0 = NOP ; 1=Burst on CPU FIQ */
        unsigned int cop_auto_swakeup_from_fiq:1;/* 0 = NOP ; 1=Burst on COP FIQ */
        unsigned int sys_state:4;           /* 0000=32 kHz Clock source; 0001=IDLE Clock Source; 001X=Run clock source; 01XX=IRQ Clock Source; 1XXX=FIQ Clock Source 0 = STDBY 1 = IDLE 2 = RUN 4 = IRQ 8 = FIQ */
    };

    uint32_t reg32;
} sclk_burst_policy_t;

#define SUPER_SCLK_DIVIDER_OFFSET 0x2C
#define SUPER_SCLK_DIVIDER_RESET  0x00000000
typedef union super_sclk_divider_u {
    struct {
        unsigned int super_sdiv_divisor:8;  /* Actual value = n + 1 */
        unsigned int super_sdiv_dividend:8; /* Actual value = n + 1 */
        unsigned int undefined_bits_16_23:8;
        unsigned int super_sdiv_dis_from_cpu_irq:1;/* 0 = enable IRQ, disable IRQ */
        unsigned int super_sdiv_dis_from_cop_irq:1;/* 0 = enable IRQ, disable IRQ */
        unsigned int super_sdiv_dis_from_cpu_fiq:1;/* 0 = enable FIQ, disable FIQ */
        unsigned int super_sdiv_dis_from_cop_fiq:1;/* 0 = enable FIQ, disable FIQ */
        unsigned int undefined_bits_28_30:3;
        unsigned int super_sdiv_enb:1;      /* 0 = disable divider. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} super_sclk_divider_t;

#define CLK_SYSTEM_RATE_OFFSET 0x30
#define CLK_SYSTEM_RATE_RESET  0x00000000
typedef union clk_system_rate_u {
    struct {
        unsigned int apb_rate:2;            /* 1/(n+1) of HCLK */
        unsigned int undefined_bit_2:1;
        unsigned int pclk_dis:1;            /* 0=enable PCLK, 1=disable PCLK */
        unsigned int ahb_rate:2;            /* 1/(n+1) of SCLK */
        unsigned int undefined_bit_6:1;
        unsigned int hclk_dis:1;            /* 0=enable HCLK, 1=disable HCLK */
        unsigned int undefined_bits_8_31:24;
    };

    uint32_t reg32;
} clk_system_rate_t;

#define PROG_DLY_CLK_OFFSET 0x34
#define PROG_DLY_CLK_RESET  0x00000077
typedef union prog_dly_clk_u {
    struct {
        unsigned int undefined_bits_0_7:8;
        unsigned int sync_clk_delclk_sel:4; /* 16 Taps of selectable delay for SYNC_CLK clk doubler */
        unsigned int clk_d_delclk_sel:4;    /* 16 Taps of selectable delay for CLK_M clk doubler */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} prog_dly_clk_t;

#define AUDIO_SYNC_CLK_RATE_OFFSET 0x38
#define AUDIO_SYNC_CLK_RATE_RESET  0x00000000
typedef union audio_sync_clk_rate_u {
    struct {
        unsigned int sync_clk_rate:4;       /* 0000 = SPDIFIN recovered bit clock. 0001 = I2S1 bit clock. 0010 = I2S2 bit clock. 0011 = AC97 bit clock. 0100 = pllA_out0. 0101 = external audio clock (dap_mclk2). 0110 = external audio clock (dap_mclk1). 0111 = external vimclk (vimclk). 1xxx = reserved 0 = SPDIFIN 1 = I2S1 2 = I2S2 3 = AC97 4 = PLLA_OUT0 5 = EXT_AUDIO_CLK2 6 = EXT_AUDIO_CLK1 7 = EXT_VIMCLK */
        unsigned int sync_clk_dis:1;        /* 0 = Enable AUDIO SYNC CLK */
        unsigned int undefined_bits_5_31:27;
    };

    uint32_t reg32;
} audio_sync_clk_rate_t;

#define COP_CLK_SKIP_POLICY_OFFSET 0x40
#define COP_CLK_SKIP_POLICY_RESET  0x00000000
typedef union cop_clk_skip_policy_u {
    struct {
        unsigned int cop_clk_skip_rate_idle:3;/* Same definitions as COP_CLK_SKIP_RATE_FIQ */
        unsigned int undefined_bit_3:1;
        unsigned int cop_clk_skip_rate_run:3;/* Same definitions as COP_CLK_SKIP_RATE_FIQ */
        unsigned int undefined_bit_7:1;
        unsigned int cop_clk_skip_rate_irq:3;/* Same definitions as COP_CLK_SKIP_RATE_FIQ */
        unsigned int undefined_bit_11:1;
        unsigned int cop_clk_skip_rate_fiq:3;/* skip n/16 clock */
        unsigned int undefined_bits_15_23:9;
        unsigned int cop_clk_skip_enb_from_cpu_irq:1;/* 0 = NOP ; 1=Burst on CPU IRQ */
        unsigned int cop_clk_skip_enb_from_cop_irq:1;/* 0 = NOP ; 1=Burst on COP IRQ */
        unsigned int cop_clk_skip_enb_from_cpu_fiq:1;/* 0 = NOP ; 1=Burst on CPU FIQ */
        unsigned int cop_clk_skip_enb_from_cop_fiq:1;/* 0 = NOP ; 1=Burst on COP FIQ */
        unsigned int cop_clk_skip_state:4;  /* 0000=no skip. 0001=skip base on IDLE Clock skip rate; 001X=skip base on Run clock skip rate; 01XX=skip base on IRQ Clock skip rate; 1XXX=skip base on FIQ Clock skip rate */
    };

    uint32_t reg32;
} cop_clk_skip_policy_t;

#define CLK_MASK_ARM_OFFSET 0x44
#define CLK_MASK_ARM_RESET  0x00000000
#define CLK_MASK_ARM_WRMASK 0x7FFFFFFF
typedef union clk_mask_arm_u {
    struct {
        unsigned int clk_mask_cop:2;        /* 00 = no clock masking. 01 = u2_nwait_r. 10 = u2_nwait_r. 11 = no clock masking */
        unsigned int undefined_bits_2_15:14;
        unsigned int clk_mask_cpu_halt:1;   /* 1 = HW will stop clock to CPU when halt, 0 = no clock stop */
        unsigned int rst_cpu0_when_halt:1;  /*  1 = reset CPU0 when flow control assert halt. */
        unsigned int undefined_bits_18_30:13;
        unsigned int axi_flush_done:1;      /* 1 = CPU AXI pipe is flushed */
    };

    uint32_t reg32;
} clk_mask_arm_t;

#define MISC_CLK_ENB_OFFSET 0x48
#define MISC_CLK_ENB_RESET  0x00000000
typedef union misc_clk_enb_u {
    struct {
        unsigned int undefined_bits_0_19:20;
        unsigned int dev2_osc_div_sel:2;    /* 00 = osc, 01 = osc/2, 10 = osc/4, 11 = osc/8 */
        unsigned int dev1_osc_div_sel:2;    /* 00 = osc, 01 = osc/2, 10 = osc/4, 11 = osc/8 */
        unsigned int undefined_bits_24_27:4;
        unsigned int cfg_all_visible:1;     /* 1 = VISIBLE, 0 = NOT VISIBLE. */
        unsigned int undefined_bits_29_31:3;
    };

    uint32_t reg32;
} misc_clk_enb_t;

#define CLK_CPU_CMPLX_OFFSET 0x4C
#define CLK_CPU_CMPLX_RESET  0x00000003
typedef union clk_cpu_cmplx_u {
    struct {
        unsigned int cpu_bridge_clkdiv:2;   /* Clock divider ratio for the cpu bridge devices connected to CPU/L2-cache. 00 = div-by-1. 01 = div-by-2. 10 = div-by-3. 11 = div-by-4 */
        unsigned int undefined_bits_2_7:6;
        unsigned int cpu0_clk_stp:1;        /* 1 = CPU0 clock stop, 0 = CPU0 clock run */
        unsigned int cpu1_clk_stp:1;        /* 1 = CPU1 clock stop, 0 = CPU1 clock run */
        unsigned int undefined_bits_10_31:22;
    };

    uint32_t reg32;
} clk_cpu_cmplx_t;

#define OSC_CTRL_OFFSET 0x50
#define OSC_CTRL_RESET  0x000003F1
typedef union osc_ctrl_u {
    struct {
        unsigned int xoe:1;                 /* Crystal oscillator enable (1 = enable) */
        unsigned int xobp:1;                /* Crystal oscillator bypass enable (1 = enable bypass) */
        unsigned int undefined_bits_2_3:2;
        unsigned int xofs:6;                /* Crystal oscillator drive strength control */
        unsigned int undefined_bits_10_11:2;
        unsigned int xods:5;                /* Crystal oscillator duty cycle control */
        unsigned int undefined_bits_17_19:3;
        unsigned int oscfi_spare:8;         /* Crystal oscillator spare register control */
        unsigned int pll_ref_div:2;         /* PLL reference clock divide. 00 = /1, 01 = /2, 10 = /4, 11 = reserve */
        unsigned int osc_freq:2;            /* 00 = 13MHz, 01 = 19.2MHz, 10 = 12MHz, 11 = 26MHz */
    };

    uint32_t reg32;
} osc_ctrl_t;

#define PLL_LFSR_OFFSET 0x54
#define PLL_LFSR_RESET  0x00000000
typedef union pll_lfsr_u {
    struct {
        unsigned int rnd:16;                /* Random number generated from PLL linear feedback shift register */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} pll_lfsr_t;

#define OSC_FREQ_DET_OFFSET 0x58
#define OSC_FREQ_DET_RESET  0x00000000
typedef union osc_freq_det_u {
    struct {
        unsigned int ref_clk_win_cfg:4;     /* Indicate the # of 32 kHz clock period as window in n+1 scheme */
        unsigned int undefined_bits_4_30:27;
        unsigned int osc_freq_det_trig:1;   /* 0 = default, 1 = enable osc frequency detect.  0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} osc_freq_det_t;

#define OSC_FREQ_DET_STATUS_OFFSET 0x5C
#define OSC_FREQ_DET_STATUS_RESET  0x00000000
typedef union osc_freq_det_status_u {
    struct {
        unsigned int osc_freq_det_cnt:16;   /* indicate the number of osc count within the 32 kHz clock reference window */
        unsigned int undefined_bits_16_30:15;
        unsigned int osc_freq_det_busy:1;   /* 0 = not busy, 1 = busy */
    };

    uint32_t reg32;
} osc_freq_det_status_t;

#define PLLC_BASE_OFFSET 0x80
#define PLLC_BASE_RESET  0x0000010C
#define PLLC_BASE_WRMASK 0xF7FFFFFF
typedef union pllc_base_u {
    struct {
        unsigned int pllc_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int pllc_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int pllc_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int pllc_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int pllc_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int pllc_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllc_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} pllc_base_t;

#define PLLC_OUT_OFFSET 0x84
#define PLLC_OUT_RESET  0x00000003
typedef union pllc_out_u {
    struct {
        unsigned int pllc_out1_rstn:1;      /* PLLC_OUT1 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllc_out1_clken:1;     /* PLLC_OUT1 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_2_7:6;
        unsigned int pllc_out1_ratio:8;     /* PLLC_OUT1 divider from base PLLC (lsb denote 0.5x) */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} pllc_out_t;

#define PLLC_MISC_OFFSET 0x8C
#define PLLC_MISC_RESET  0x00000100
typedef union pllc_misc_u {
    struct {
        unsigned int pllc_vcocon:4;         /* Base PLLC VCO range setup control */
        unsigned int pllc_lfcon:4;          /* Base PLLC loop filter setup control */
        unsigned int pllc_cpcon:4;          /* Base PLLC charge pump setup control */
        unsigned int pllc_lock_sel:6;       /* lock select */
        unsigned int pllc_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_19:1;
        unsigned int pllc_dccon:1;          /* Base PLLC DCCON control */
        unsigned int undefined_bit_21:1;
        unsigned int pllc_pts:2;            /* Base PLLC test output select */
        unsigned int undefined_bits_24_29:6;
        unsigned int pllc_out1_div_byp:1;   /* 1 = bypass PLLC_OUT1 divider */
        unsigned int pllc_out1_inv_clk:1;   /* 1 = invert PLLC_OUT1 clock */
    };

    uint32_t reg32;
} pllc_misc_t;

#define PLLM_BASE_OFFSET 0x90
#define PLLM_BASE_RESET  0x0000010C
#define PLLM_BASE_WRMASK 0xF7FFFFFF
typedef union pllm_base_u {
    struct {
        unsigned int pllm_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int pllm_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int pllm_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int pllm_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int pllm_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int pllm_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllm_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} pllm_base_t;

#define PLLM_OUT_OFFSET 0x94
#define PLLM_OUT_RESET  0x00000003
typedef union pllm_out_u {
    struct {
        unsigned int pllm_out1_rstn:1;      /* PLLM_OUT1 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllm_out1_clken:1;     /* PLLM_OUT1 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_2_7:6;
        unsigned int pllm_out1_ratio:8;     /* PLLM_OUT1 divider from base PLLM (lsb denote 0.5x) */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} pllm_out_t;

#define PLLM_MISC_OFFSET 0x9C
#define PLLM_MISC_RESET  0x00000100
typedef union pllm_misc_u {
    struct {
        unsigned int pllm_vcocon:4;         /* Base PLLM VCO range setup control */
        unsigned int pllm_lfcon:4;          /* Base PLLM loop filter setup control */
        unsigned int pllm_cpcon:4;          /* Base PLLM charge pump setup control */
        unsigned int pllm_lock_sel:6;       /* lock select */
        unsigned int pllm_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_19:1;
        unsigned int pllm_dccon:1;          /* Base PLLM DCCON control */
        unsigned int undefined_bit_21:1;
        unsigned int pllm_pts:2;            /* Base PLLM test output select */
        unsigned int pllm_setup:4;          /* Base PLLM setup */
        unsigned int undefined_bits_28_29:2;
        unsigned int pllm_out1_div_byp:1;   /* 1 = bypass PLLM_OUT1 divider */
        unsigned int pllm_out1_inv_clk:1;   /* 1 = invert PLLM_OUT1 clock */
    };

    uint32_t reg32;
} pllm_misc_t;

#define PLLP_BASE_OFFSET 0xA0
#define PLLP_BASE_RESET  0x0000010C
#define PLLP_BASE_WRMASK 0xF7FFFFFF
typedef union pllp_base_u {
    struct {
        unsigned int pllp_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int pllp_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int pllp_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int pllp_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int pllp_base_ovrride:1;   /* 0 = disallow base override , 1 = allow base override. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int pllp_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} pllp_base_t;

#define PLLP_OUTA_OFFSET 0xA4
#define PLLP_OUTA_RESET  0x00030003
typedef union pllp_outa_u {
    struct {
        unsigned int pllp_out1_rstn:1;      /* PLLP_OUT1 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllp_out1_clken:1;     /* PLLP_OUT1 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_out1_ovrride:1;   /* 0 = disallow PLLP_OUT1 ratio override, 1 = enable override. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_3_7:5;
        unsigned int pllp_out1_ratio:8;     /* PLLP_OUT1 divider from base PLLP (lsb denote 0.5x) */
        unsigned int pllp_out2_rstn:1;      /* PLLP_OUT2 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllp_out2_clken:1;     /* PLLP_OUT2 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_out2_ovrride:1;   /* 0 = disallow PLLP_OUT2 ratio override, 1 = enable override. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_19_23:5;
        unsigned int pllp_out2_ratio:8;     /* PLLP_OUT2 divider from base PLLP (lsb denote 0.5x) */
    };

    uint32_t reg32;
} pllp_outa_t;

#define PLLP_OUTB_OFFSET 0xA8
#define PLLP_OUTB_RESET  0x00030003
typedef union pllp_outb_u {
    struct {
        unsigned int pllp_out3_rstn:1;      /* PLLP_OUT3 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllp_out3_clken:1;     /* PLLP_OUT3 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_out3_ovrride:1;   /* 0 = disallow PLLP_OUT3 ratio override, 1 = enable override. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_3_7:5;
        unsigned int pllp_out3_ratio:8;     /* PLLP_OUT3 divider from base PLLP (lsb denote 0.5x) */
        unsigned int pllp_out4_rstn:1;      /* PLLP_OUT4 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int pllp_out4_clken:1;     /* PLLP_OUT4 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllp_out4_ovrride:1;   /* 0 = disallow PLLP_OUT4 ratio override, 1 = enable override. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_19_23:5;
        unsigned int pllp_out4_ratio:8;     /* PLLP_OUT4 divider from base PLLP (lsb denote 0.5x) */
    };

    uint32_t reg32;
} pllp_outb_t;

#define PLLP_MISC_OFFSET 0xAC
#define PLLP_MISC_RESET  0x00000100
typedef union pllp_misc_u {
    struct {
        unsigned int pllp_vcocon:4;         /* Base PLLP VCO range setup control */
        unsigned int pllp_lfcon:4;          /* Base PLLP loop filter setup control */
        unsigned int pllp_cpcon:4;          /* Base PLLP charge pump setup control */
        unsigned int pllp_lock_sel:6;       /* lock select */
        unsigned int pllp_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_19:1;
        unsigned int pllp_dccon:1;          /* Base PLLP DCCON control */
        unsigned int undefined_bit_21:1;
        unsigned int pllp_pts:2;            /* Base PLLP test output select */
        unsigned int pllp_out1_div_byp:1;   /* 1 = bypass PLLP_OUT1 divider */
        unsigned int pllp_out2_div_byp:1;   /* 1 = bypass PLLP_OUT2 divider */
        unsigned int pllp_out3_div_byp:1;   /* 1 = bypass PLLP_OUT3 divider */
        unsigned int pllp_out4_div_byp:1;   /* 1 = bypass PLLP_OUT4 divider */
        unsigned int pllp_out1_inv_clk:1;   /* 1 = invert PLLP_OUT1 clock */
        unsigned int pllp_out2_inv_clk:1;   /* 1 = invert PLLP_OUT2 clock */
        unsigned int pllp_out3_inv_clk:1;   /* 1 = invert PLLP_OUT3 clock */
        unsigned int pllp_out4_inv_clk:1;   /* 1 = invert PLLP_OUT4 clock */
    };

    uint32_t reg32;
} pllp_misc_t;

#define PLLA_BASE_OFFSET 0xB0
#define PLLA_BASE_RESET  0x0000010C
#define PLLA_BASE_WRMASK 0xF7FFFFFF
typedef union plla_base_u {
    struct {
        unsigned int plla_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int plla_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int plla_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int plla_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int plla_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int plla_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int plla_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} plla_base_t;

#define PLLA_OUT_OFFSET 0xB4
#define PLLA_OUT_RESET  0x00000003
typedef union plla_out_u {
    struct {
        unsigned int plla_out0_rstn:1;      /* PLLA_OUT0 divider reset. 0 = reset, 1 = not reset. 0 = RESET_ENABLE 1 = RESET_DISABLE */
        unsigned int plla_out0_clken:1;     /* PLLA_OUT0 divider clk enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_2_7:6;
        unsigned int plla_out0_ratio:8;     /* PLLA_OUT0 divider from base PLLA (lsb denote 0.5x). 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} plla_out_t;

#define PLLA_MISC_OFFSET 0xBC
#define PLLA_MISC_RESET  0x00000100
typedef union plla_misc_u {
    struct {
        unsigned int plla_vcocon:4;         /* Base PLLA VCO range setup control */
        unsigned int plla_lfcon:4;          /* Base PLLA loop filter setup control */
        unsigned int plla_cpcon:4;          /* Base PLLA charge pump setup control */
        unsigned int plla_lock_sel:6;       /* lock select */
        unsigned int plla_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_19:1;
        unsigned int plla_dccon:1;          /* Base PLLA DCCON control */
        unsigned int undefined_bit_21:1;
        unsigned int plla_pts:2;            /* Base PLLA test output select */
        unsigned int undefined_bits_24_29:6;
        unsigned int plla_out0_div_byp:1;   /* 1 = bypass PLLA_OUT0 divider */
        unsigned int plla_out0_inv_clk:1;   /* 1 = invert PLLA_OUT0 clock */
    };

    uint32_t reg32;
} plla_misc_t;

#define PLLU_BASE_OFFSET 0xC0
#define PLLU_BASE_RESET  0x0000010C
#define PLLU_BASE_WRMASK 0xF7FFFFFF
typedef union pllu_base_u {
    struct {
        unsigned int pllu_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int pllu_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int pllu_vco_freq:1;       /* 0 = post-div of 2, 1 = post-div of 1 */
        unsigned int pllu_clkenable_usb:1;  /* FO_USB output enable. This bit is used only when PLLU_OVERRIDE bit is set. Otherwise, USB controllers will control this automatically. 0 = disable, 1 = enable */
        unsigned int pllu_clkenable_hsic:1; /* FO_HSIC output enable. This bit is used only when PLLU_OVERRIDE bit is set. Otherwise, USB controllers will control this automatically. 0 = disable, 1 = enable */
        unsigned int pllu_clkenable_icusb:1;/* FO_ICUSB output enable. This bit is use only when PLLU_OVERRIDE bit is set */
        unsigned int pllu_override:1;       /* 0 = FO_[ICUSB,HSIC,USB] controlled by USB controllers, 1 = controlled by PLLU_CLKENABLEs. */
        unsigned int undefined_bits_25_26:2;
        unsigned int pllu_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int pllu_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int pllu_enable:1;         /* 0 = disable, 1 = enable. This bit is used only when PLLU_OVERRIDE bit is set. 0 = DISABLE 1 = ENABLE */
        unsigned int pllu_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} pllu_base_t;

#define PLLU_MISC_OFFSET 0xCC
#define PLLU_MISC_RESET  0x00000100
typedef union pllu_misc_u {
    struct {
        unsigned int pllu_vcocon:4;         /* Base PLLU VCO range setup control */
        unsigned int pllu_lfcon:4;          /* Base PLLU loop filter setup control */
        unsigned int pllu_cpcon:4;          /* Base PLLU charge pump setup control */
        unsigned int pllu_lock_sel:6;       /* lock select */
        unsigned int undefined_bits_18_21:4;
        unsigned int pllu_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_23_26:4;
        unsigned int pllu_pts:3;            /* Base PLLU test output select */
        unsigned int undefined_bits_30_31:2;
    };

    uint32_t reg32;
} pllu_misc_t;

#define PLLD_BASE_OFFSET 0xD0
#define PLLD_BASE_RESET  0x0000010C
#define PLLD_BASE_WRMASK 0xF7FFFFFF
typedef union plld_base_u {
    struct {
        unsigned int plld_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int plld_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int plld_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int plld_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int plld_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int plld_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int plld_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} plld_base_t;

#define PLLD_MISC_OFFSET 0xDC
#define PLLD_MISC_RESET  0x00000100
typedef union plld_misc_u {
    struct {
        unsigned int plld_vcocon:4;         /* Base PLLD VCO range setup control */
        unsigned int plld_lfcon:4;          /* Base PLLD loop filter setup control */
        unsigned int plld_cpcon:4;          /* Base PLLD charge pump setup control */
        unsigned int plld_dccon:4;          /* Base PLLD DCCON control */
        unsigned int plld_lock_sel:6;       /* lock select */
        unsigned int plld_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int plld_div_rst:1;        /* 0 = normal operation, 1 = reset */
        unsigned int plld_loadadj:3;        /* load pulse position adjust */
        unsigned int plld_pts:3;            /* Base PLLD test output select */
        unsigned int plld_clkenable:1;      /* 0 = disable, 1 = normal operation */
        unsigned int plld_fo_mode:1;        /* 1 = 5-125MHz, 0 = 40-1000MHz */
    };

    uint32_t reg32;
} plld_misc_t;

#define PLLX_BASE_OFFSET 0xE0
#define PLLX_BASE_RESET  0x0000010C
#define PLLX_BASE_WRMASK 0xF7FFFFFF
typedef union pllx_base_u {
    struct {
        unsigned int pllx_divm:5;           /* PLL input divider */
        unsigned int undefined_bits_5_7:3;
        unsigned int pllx_divn:10;          /* PLL feedback divider */
        unsigned int undefined_bits_18_19:2;
        unsigned int pllx_divp:3;           /* 0 = post divider (2^n) */
        unsigned int undefined_bits_23_26:4;
        unsigned int pllx_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int undefined_bit_28:1;
        unsigned int pllx_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int pllx_enable:1;         /* 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int pllx_bypass:1;         /* 0 = no bypass, 1 = bypass. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} pllx_base_t;

#define PLLX_MISC_OFFSET 0xE4
#define PLLX_MISC_RESET  0x00100100
typedef union pllx_misc_u {
    struct {
        unsigned int pllx_vcocon:4;         /* Base PLLX VCO range setup control */
        unsigned int pllx_lfcon:4;          /* Base PLLX loop filter setup control */
        unsigned int pllx_cpcon:4;          /* Base PLLX charge pump setup control */
        unsigned int pllx_lock_sel:6;       /* lock select */
        unsigned int pllx_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bit_19:1;
        unsigned int pllx_dccon:1;          /* Base PLLX DCCON control */
        unsigned int undefined_bit_21:1;
        unsigned int pllx_pts:2;            /* Base PLLX test output select */
        unsigned int pllx_setup:4;          /* Base PLLX setup */
        unsigned int undefined_bits_28_31:4;
    };

    uint32_t reg32;
} pllx_misc_t;

#define PLLE_BASE_OFFSET 0xE8
#define PLLE_BASE_RESET  0x0D18C801
typedef union plle_base_u {
    struct {
        unsigned int plle_mdiv:8;           /* input divider */
        unsigned int plle_ndiv:8;           /* feedback divider */
        unsigned int plle_pldiv:6;          /* post divider for CLOCKOUT and SYNC_CLOCKOUT */
        unsigned int plle_ext_setup_19_18:2;/* Base PLLE setup[19:18] */
        unsigned int plle_pldiv_cml:4;      /* divider control for CLOCKOUT_CML/CLOCKOUTB_CML */
        unsigned int plle_fdiv4b:1;         /* 0 gives vcoclk/4, 1 gives vcoclk/2 clock to the interpolator logic. Normally set to zero */
        unsigned int plle_lock_override:1;  /* Forces PLL_LOCK to 1 */
        unsigned int plle_enable:1;         /* PLL enable. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
        unsigned int plle_enable_cml:1;     /* Enable CML pdivider. 0 = disable, 1 = enable. 0 = DISABLE 1 = ENABLE */
    };

    uint32_t reg32;
} plle_base_t;

#define PLLE_MISC_OFFSET 0xEC
#define PLLE_MISC_RESET  0x00000000
#define PLLE_MISC_WRMASK 0xFFFF07FF
typedef union plle_misc_u {
    struct {
        unsigned int plle_kvco:1;           /* Base PLLE VCO gain */
        unsigned int plle_sync_mode:1;      /* Base PLLE sync mode (leave it at 0) */
        unsigned int plle_ext_setup_17_16:2;/* Base PLLE setup[17:16] */
        unsigned int plle_lfres:2;          /* Base PLLE loop filter resistor control */
        unsigned int plle_kcp:2;            /* Base PLLE charge pump gain control */
        unsigned int plle_pts:1;            /* Bypass PLL (similar to PTO control of other PLL). 0 = PTO always 0 if PLLE_ENABLE=0 (SYN_CLOCKOUT=0), 0 = PTO = PLLE CLOCKIN if PLLE_ENABLE=1, 1 = PTO = PLLE FO (SYN_CLOCKOUT=VCOCLOCK/PLDIV) */
        unsigned int plle_lock_enable:1;    /* 1 = enable, 0 = disable.  0 = DISABLE 1 = ENABLE */
        unsigned int plle_ref_dis:1;        /* 0 = enable reference clk, 1 = disable reference clk. 0 = REF_ENABLE 1 = REF_DISABLE */
        unsigned int plle_lock:1;           /* 0 = not lock, 1 = lock */
        unsigned int plle_mon_testout:3;    /* Process monitor debug output */
        unsigned int plle_pll_ready:1;      /* When read, this is PLL_READY status: 1 = PLL finish training, 0 = PLL not finish training */
        unsigned int plle_setup:16;         /* Base PLLE setup[15:0] */
    };

    uint32_t reg32;
} plle_misc_t;

#define CLK_SOURCE_I2S1_OFFSET 0x100
#define CLK_SOURCE_I2S1_RESET  0xD0000000
typedef union clk_source_i2s1_u {
    struct {
        unsigned int i2s1_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_27:20;
        unsigned int i2s1_master_clken:1;   /* 1 = enable I2S1 master clock, disable I2S1 master clock */
        unsigned int undefined_bit_29:1;
        unsigned int i2s1_clk_src:2;        /* 00 = pllA_out0 01 = audio SYNC_CLK x 2 10 = pllP_out0 11 = clk_m 0 = PLLA_OUT0 1 = SYNC_CLK_X2 2 = PLLP_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_i2s1_t;

#define CLK_SOURCE_I2S2_OFFSET 0x104
#define CLK_SOURCE_I2S2_RESET  0xD0000000
typedef union clk_source_i2s2_u {
    struct {
        unsigned int i2s2_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_27:20;
        unsigned int i2s2_master_clken:1;   /* 1 = enable I2S2 master clock, disable I2S2 master clock */
        unsigned int undefined_bit_29:1;
        unsigned int i2s2_clk_src:2;        /* 00 = pllA_out0 01 = audio SYNC_CLK x 2 10 = pllP_out0 11 = clk_m 0 = PLLA_OUT0 1 = SYNC_CLK_X2 2 = PLLP_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_i2s2_t;

#define CLK_SOURCE_SPDIF_OUT_OFFSET 0x108
#define CLK_SOURCE_SPDIF_OUT_RESET  0xC0000000
typedef union clk_source_spdif_out_u {
    struct {
        unsigned int spdifout_clk_divisor:8;/* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spdifout_clk_src:2;    /* 00 = pllA_out0 01 = audio SYNC_CLK x 2 10 = pllP_out0 11 = clk_m 0 = PLLA_OUT0 1 = SYNC_CLK_X2 2 = PLLP_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_spdif_out_t;

#define CLK_SOURCE_SPDIF_IN_OFFSET 0x10C
#define CLK_SOURCE_SPDIF_IN_RESET  0x00000000
typedef union clk_source_spdif_in_u {
    struct {
        unsigned int spdifin_clk_divisor:8; /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spdifin_clk_src:2;     /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = 1'b0 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 */
    };

    uint32_t reg32;
} clk_source_spdif_in_t;

#define CLK_SOURCE_PWM_OFFSET 0x110
#define CLK_SOURCE_PWM_RESET  0x30000000
typedef union clk_source_pwm_u {
    struct {
        unsigned int pwm_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_27:20;
        unsigned int pwm_clk_src:3;         /* 000 = pllP_out0 001 = pllC_out0 010 = audio SYNC_CLK x 2 011 = clk_m 100 = clk_s 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = SYNC_CLK_X2 3 = CLK_M 4 = CLK_S */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} clk_source_pwm_t;

#define CLK_SOURCE_SPI1_OFFSET 0x114
#define CLK_SOURCE_SPI1_RESET  0xC0000000
typedef union clk_source_spi1_u {
    struct {
        unsigned int spi1_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spi1_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_spi1_t;

#define CLK_SOURCE_SPI22_OFFSET 0x118
#define CLK_SOURCE_SPI22_RESET  0xC0000000
typedef union clk_source_spi22_u {
    struct {
        unsigned int spi2_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spi2_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_spi22_t;

#define CLK_SOURCE_SPI3_OFFSET 0x11C
#define CLK_SOURCE_SPI3_RESET  0xC0000000
typedef union clk_source_spi3_u {
    struct {
        unsigned int spi3_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spi3_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_spi3_t;

#define CLK_SOURCE_XIO_OFFSET 0x120
#define CLK_SOURCE_XIO_RESET  0xC0000000
typedef union clk_source_xio_u {
    struct {
        unsigned int xio_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int xio_clk_src:2;         /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_xio_t;

#define CLK_SOURCE_I2C1_OFFSET 0x124
#define CLK_SOURCE_I2C1_RESET  0xC0000000
typedef union clk_source_i2c1_u {
    struct {
        unsigned int i2c1_clk_divisor:16;   /* N = Divide by (n+1) (lsb denote 1.0x) */
        unsigned int undefined_bits_16_29:14;
        unsigned int i2c1_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_i2c1_t;

#define CLK_SOURCE_DVC_I2C_OFFSET 0x128
#define CLK_SOURCE_DVC_I2C_RESET  0xC0000000
typedef union clk_source_dvc_i2c_u {
    struct {
        unsigned int dvc_i2c_clk_divisor:16;/* N = Divide by (n+1) (lsb denote 1.0x) */
        unsigned int undefined_bits_16_29:14;
        unsigned int dvc_i2c_clk_src:2;     /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_dvc_i2c_t;

#define CLK_SOURCE_TWC_OFFSET 0x12C
#define CLK_SOURCE_TWC_RESET  0xC0000000
typedef union clk_source_twc_u {
    struct {
        unsigned int twc_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int twc_clk_src:2;         /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_twc_t;

#define CLK_SOURCE_SBC1_OFFSET 0x134
#define CLK_SOURCE_SBC1_RESET  0xC0000000
typedef union clk_source_sbc1_u {
    struct {
        unsigned int sbc1_clk_divisor:8;    /*  N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int sbc1_clk_src:2;        /*  00 = pllP_out0  01 = pllC_out0  10 = pllM_out0  11 = clk_m */
    };

    uint32_t reg32;
} clk_source_sbc1_t;

#define CLK_SOURCE_DISP1_OFFSET 0x138
#define CLK_SOURCE_DISP1_RESET  0x00000003
typedef union clk_source_disp1_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int disp1_clk_src:2;       /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_disp1_t;

#define CLK_SOURCE_DISP2_OFFSET 0x13C
#define CLK_SOURCE_DISP2_RESET  0x00000003
typedef union clk_source_disp2_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int disp2_clk_src:2;       /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_disp2_t;

#define CLK_SOURCE_CVE_OFFSET 0x140
#define CLK_SOURCE_CVE_RESET  0xC0000000
typedef union clk_source_cve_u {
    struct {
        unsigned int cve_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int cve_clk_src:2;         /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_cve_t;

#define CLK_SOURCE_IDE_OFFSET 0x144
#define CLK_SOURCE_IDE_RESET  0xC0000000
typedef union clk_source_ide_u {
    struct {
        unsigned int ide_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int ide_clk_src:2;         /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_ide_t;

#define CLK_SOURCE_VI_OFFSET 0x148
#define CLK_SOURCE_VI_RESET  0x00000000
typedef union clk_source_vi_u {
    struct {
        unsigned int vi_clk_divisor:8;      /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_23:16;
        unsigned int vi_clk_sel:1;          /* 0 = select internal clock, 1 = select external clock (pd2vi_clk). 0 = INTERNAL 1 = EXTERNAL */
        unsigned int pd2vi_clk_sel:1;       /* 0 = pd2vi_clk, 1 = vi_sensor_clk */
        unsigned int undefined_bits_26_29:4;
        unsigned int vi_clk_src:2;          /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_vi_t;

#define CLK_SOURCE_SDMMC1_OFFSET 0x150
#define CLK_SOURCE_SDMMC1_RESET  0xC0000000
typedef union clk_source_sdmmc1_u {
    struct {
        unsigned int sdmmc1_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_15:8;
        unsigned int sdmmc1_int_fb_dly:4;   /* 16-tap of internal feedback clock delay. */
        unsigned int undefined_bits_20_22:3;
        unsigned int sdmmc1_int_fb_sel:1;   /* 1 = use internal feedback clock. 0 = use external feedback clock. */
        unsigned int undefined_bits_24_29:6;
        unsigned int sdmmc1_clk_src:2;      /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_sdmmc1_t;

#define CLK_SOURCE_SDMMC2_OFFSET 0x154
#define CLK_SOURCE_SDMMC2_RESET  0xC0000000
typedef union clk_source_sdmmc2_u {
    struct {
        unsigned int sdmmc2_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_15:8;
        unsigned int sdmmc2_int_fb_dly:4;   /* 16-tap of internal feedback clock delay. */
        unsigned int undefined_bits_20_22:3;
        unsigned int sdmmc2_int_fb_sel:1;   /* 1 = use internal feedback clock. 0 = use external feedback clock. */
        unsigned int undefined_bits_24_29:6;
        unsigned int sdmmc2_clk_src:2;      /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_sdmmc2_t;

#define CLK_SOURCE_G3D_OFFSET 0x158
#define CLK_SOURCE_G3D_RESET  0x00000000
typedef union clk_source_g3d_u {
    struct {
        unsigned int g3d_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int g3d_idle_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) if all 0's, this idle divisor field will not be used. For non-zero values, when host1x is idle, this field will be used instead of G3D_CLK_DIVISOR */
        unsigned int undefined_bits_16_29:14;
        unsigned int g3d_clk_src:2;         /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_g3d_t;

#define CLK_SOURCE_G2D_OFFSET 0x15C
#define CLK_SOURCE_G2D_RESET  0x00000000
typedef union clk_source_g2d_u {
    struct {
        unsigned int g2d_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int g2d_idle_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) if all 0's, this idle divisor field will not be used. For non-zero values, when host1x is idle, this field will be used instead of G2D_CLK_DIVISOR */
        unsigned int undefined_bits_16_29:14;
        unsigned int g2d_clk_src:2;         /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_g2d_t;

#define CLK_SOURCE_NDFLASH_OFFSET 0x160
#define CLK_SOURCE_NDFLASH_RESET  0xC0000000
typedef union clk_source_ndflash_u {
    struct {
        unsigned int ndflash_clk_divisor:8; /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int ndflash_clk_src:2;     /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_ndflash_t;

#define CLK_SOURCE_SDMMC4_OFFSET 0x164
#define CLK_SOURCE_SDMMC4_RESET  0xC0000000
typedef union clk_source_sdmmc4_u {
    struct {
        unsigned int sdmmc4_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_15:8;
        unsigned int sdmmc4_int_fb_dly:4;   /* 16-tap of internal feedback clock delay. */
        unsigned int undefined_bits_20_22:3;
        unsigned int sdmmc4_int_fb_sel:1;   /* 1 = use internal feedback clock. 0 = use external feedback clock. */
        unsigned int undefined_bits_24_29:6;
        unsigned int sdmmc4_clk_src:2;      /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = CLK_M 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_sdmmc4_t;

#define CLK_SOURCE_VFIR_OFFSET 0x168
#define CLK_SOURCE_VFIR_RESET  0xC0000000
typedef union clk_source_vfir_u {
    struct {
        unsigned int vfir_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int vfir_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_vfir_t;

#define CLK_SOURCE_EPP_OFFSET 0x16C
#define CLK_SOURCE_EPP_RESET  0x00000000
typedef union clk_source_epp_u {
    struct {
        unsigned int epp_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int epp_clk_src:2;         /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_epp_t;

#define CLK_SOURCE_MPE_OFFSET 0x170
#define CLK_SOURCE_MPE_RESET  0x00000000
typedef union clk_source_mpe_u {
    struct {
        unsigned int mpe_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int mpe_clk_src:2;         /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_mpe_t;

#define CLK_SOURCE_MIPI_OFFSET 0x174
#define CLK_SOURCE_MIPI_RESET  0xC0000000
typedef union clk_source_mipi_u {
    struct {
        unsigned int mipi_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int mipi_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_mipi_t;

#define CLK_SOURCE_UART1_OFFSET 0x178
#define CLK_SOURCE_UART1_RESET  0x00000003
typedef union clk_source_uart1_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int uart1_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_uart1_t;

#define CLK_SOURCE_UART2_OFFSET 0x17C
#define CLK_SOURCE_UART2_RESET  0x00000003
typedef union clk_source_uart2_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int uart2_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_uart2_t;

#define CLK_SOURCE_HOST1X_OFFSET 0x180
#define CLK_SOURCE_HOST1X_RESET  0x00000000
typedef union clk_source_host1x_u {
    struct {
        unsigned int host1x_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int host1x_idle_divisor:8; /* N = Divide by (n+1) (lsb denote 0.5x) if all 0's, this idle divisor field will not be used. For non-zero values, when host1x is idle, this field will be used instead of HOST1X_CLK_DIVISOR */
        unsigned int undefined_bits_16_29:14;
        unsigned int host1x_clk_src:2;      /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_host1x_t;

#define CLK_SOURCE_TVO_OFFSET 0x188
#define CLK_SOURCE_TVO_RESET  0xC0000000
typedef union clk_source_tvo_u {
    struct {
        unsigned int tvo_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int tvo_clk_src:2;         /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_tvo_t;

#define CLK_SOURCE_HDMI_OFFSET 0x18C
#define CLK_SOURCE_HDMI_RESET  0xC0000000
typedef union clk_source_hdmi_u {
    struct {
        unsigned int hdmi_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int hdmi_clk_src:2;        /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_hdmi_t;

#define CLK_SOURCE_TVDAC_OFFSET 0x194
#define CLK_SOURCE_TVDAC_RESET  0xC0000000
typedef union clk_source_tvdac_u {
    struct {
        unsigned int tvdac_clk_divisor:8;   /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int tvdac_clk_src:2;       /* 00 = pllP_out0 01 = pllD_out0 10 = pllC_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLD_OUT0 2 = PLLC_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_tvdac_t;

#define CLK_SOURCE_I2C2_OFFSET 0x198
#define CLK_SOURCE_I2C2_RESET  0xC0000000
typedef union clk_source_i2c2_u {
    struct {
        unsigned int i2c2_clk_divisor:16;   /* N = Divide by (n+1) (lsb denote 1.0x) */
        unsigned int undefined_bits_16_29:14;
        unsigned int i2c2_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_i2c2_t;

#define CLK_SOURCE_EMC_OFFSET 0x19C
#define CLK_SOURCE_EMC_RESET  0xC0000000
typedef union clk_source_emc_u {
    struct {
        unsigned int emc_2x_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_23:16;
        unsigned int emc_1x_clk_enb:1;      /* 1 = enable EMC 1X clock. 0 = DISABLE 1 = ENABLE */
        unsigned int emc_2x_clk_enb:1;      /* 1 = enable EMC 2X clock. 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_26_28:3;
        unsigned int use_pllm_ud:1;         /* 1 = use un-divided PllM_out0 as clock source */
        unsigned int emc_2x_clk_src:2;      /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = clk_m 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_emc_t;

#define CLK_SOURCE_UART3_OFFSET 0x1A0
#define CLK_SOURCE_UART3_RESET  0x00000003
typedef union clk_source_uart3_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int uart3_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = CLK_M 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_uart3_t;

#define CLK_SOURCE_VI_SENSOR_OFFSET 0x1A8
#define CLK_SOURCE_VI_SENSOR_RESET  0x00000000
typedef union clk_source_vi_sensor_u {
    struct {
        unsigned int vi_sensor_clk_divisor:8;/* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int vi_sensor_clk_src:2;   /* 00 = pllM_out0 01 = pllC_out0 10 = pllP_out0 11 = pllA_out0 0 = PLLM_OUT0 1 = PLLC_OUT0 2 = PLLP_OUT0 3 = PLLA_OUT0 */
    };

    uint32_t reg32;
} clk_source_vi_sensor_t;

#define CLK_SOURCE_SPI4_OFFSET 0x1B4
#define CLK_SOURCE_SPI4_RESET  0xC0000000
typedef union clk_source_spi4_u {
    struct {
        unsigned int spi4_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int spi4_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_spi4_t;

#define CLK_SOURCE_I2C3_OFFSET 0x1B8
#define CLK_SOURCE_I2C3_RESET  0xC0000000
typedef union clk_source_i2c3_u {
    struct {
        unsigned int i2c3_clk_divisor:16;   /* N = Divide by (n+1) (lsb denote 1.0x) */
        unsigned int undefined_bits_16_29:14;
        unsigned int i2c3_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_i2c3_t;

#define CLK_SOURCE_SDMMC3_OFFSET 0x1BC
#define CLK_SOURCE_SDMMC3_RESET  0xC0000000
typedef union clk_source_sdmmc3_u {
    struct {
        unsigned int sdmmc3_clk_divisor:8;  /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_15:8;
        unsigned int sdmmc3_int_fb_dly:4;   /* 16-tap of internal feedback clock delay. */
        unsigned int undefined_bits_20_22:3;
        unsigned int sdmmc3_int_fb_sel:1;   /* 1 = use internal feedback clock. 0 = use external feedback clock. */
        unsigned int undefined_bits_24_29:6;
        unsigned int sdmmc3_clk_src:2;      /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_sdmmc3_t;

#define CLK_SOURCE_UART4_OFFSET 0x1C0
#define CLK_SOURCE_UART4_RESET  0x00000003
typedef union clk_source_uart4_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int uart4_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_uart4_t;

#define CLK_SOURCE_UART5_OFFSET 0x1C4
#define CLK_SOURCE_UART5_RESET  0x00000003
typedef union clk_source_uart5_u {
    struct {
        unsigned int undefined_bits_0_29:30;
        unsigned int uart5_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_uart5_t;

#define CLK_SOURCE_VDE_OFFSET 0x1C8
#define CLK_SOURCE_VDE_RESET  0xC0000000
typedef union clk_source_vde_u {
    struct {
        unsigned int vde_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int vde_clk_src:2;         /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_vde_t;

#define CLK_SOURCE_OWR_OFFSET 0x1CC
#define CLK_SOURCE_OWR_RESET  0xC0000000
typedef union clk_source_owr_u {
    struct {
        unsigned int owr_clk_divisor:8;     /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int owr_clk_src:2;         /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_owr_t;

#define CLK_SOURCE_NOR_OFFSET 0x1D0
#define CLK_SOURCE_NOR_RESET  0xC0000000
typedef union clk_source_nor_u {
    struct {
        unsigned int snor_clk_divisor:8;    /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int snor_clk_src:2;        /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_nor_t;

#define CLK_SOURCE_CSITE_OFFSET 0x1D4
#define CLK_SOURCE_CSITE_RESET  0xC0000000
typedef union clk_source_csite_u {
    struct {
        unsigned int csite_clk_divisor:8;   /* N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int csite_clk_src:2;       /* 00 = pllP_out0 01 = pllC_out0 10 = pllM_out0 11 = clk_m 0 = PLLP_OUT0 1 = PLLC_OUT0 2 = PLLM_OUT0 3 = CLK_M */
    };

    uint32_t reg32;
} clk_source_csite_t;

#define CLK_SOURCE_OSC_OFFSET 0x1FC
#define CLK_SOURCE_OSC_RESET  0x00000000
typedef union clk_source_osc_u {
    struct {
        unsigned int undefined_bits_0_27:28;
        unsigned int osc_clk_src:1;         /* 0 = external oscillator 1 = internal PLL_S 0 = EXT_OSC */
        unsigned int undefined_bits_29_31:3;
    };

    uint32_t reg32;
} clk_source_osc_t;

#define RST_DEV_L_SET_OFFSET 0x300
#define RST_DEV_L_SET_RESET  0x3FFFFEC9
typedef union rst_dev_l_set_u {
    struct {
        unsigned int set_cpu_rst:1;         /* set reset CPU */
        unsigned int set_cop_rst:1;         /* set reset COP */
        unsigned int set_trig_sys_rst:1;    /* Write 1 to pulse System Reset Signal */
        unsigned int set_ac97_rst:1;        /* set reset AC97 Controller */
        unsigned int set_rtc_rst:1;         /* set reset RTC Controller */
        unsigned int set_tmr_rst:1;         /* set reset Timer Controller */
        unsigned int set_uart1_rst:1;       /* set reset UART1 Controller */
        unsigned int set_uart2_rst:1;       /* set reset UART2/VFIR Controller */
        unsigned int set_gpio_rst:1;        /* set reset GPIO Controller */
        unsigned int set_sdmmc2_rst:1;      /* set reset SDMMC2 Controller */
        unsigned int set_spdif_rst:1;       /* set reset SPDIF Controller */
        unsigned int set_i2s1_rst:1;        /* set reset I2S 1 Controller */
        unsigned int set_i2c1_rst:1;        /* set reset I2C1 Controller */
        unsigned int set_ndflash_rst:1;     /* set reset NAND flash controller */
        unsigned int set_sdmmc1_rst:1;      /* set reset SDMMC1 controller */
        unsigned int set_sdmmc4_rst:1;      /* set reset SDMMC4 controller */
        unsigned int set_twc_rst:1;         /* set reset Three Wire Controller */
        unsigned int set_pwm_rst:1;         /* set reset Pulse Width Modulator */
        unsigned int set_i2s2_rst:1;        /* set reset I2S 2 Controller */
        unsigned int set_epp_rst:1;         /* set reset EPP controller */
        unsigned int set_vi_rst:1;          /* set reset VI controller */
        unsigned int set_2d_rst:1;          /* set reset 2D graphics engine controller */
        unsigned int set_usbd_rst:1;        /* set reset USB controller */
        unsigned int set_isp_rst:1;         /* set reset ISP controller */
        unsigned int set_3d_rst:1;          /* set reset 3D controller */
        unsigned int set_ide_rst:1;         /* set reset IDE controller */
        unsigned int set_disp2_rst:1;       /* set reset DISP2 controller */
        unsigned int set_disp1_rst:1;       /* set reset DISP1 controller */
        unsigned int set_host1x_rst:1;      /* set reset HOST1X */
        unsigned int set_vcp_rst:1;         /* set reset vector co-processor */
        unsigned int undefined_bit_30:1;
        unsigned int set_cache2_rst:1;      /* set reset COP cache controller */
    };

    uint32_t reg32;
} rst_dev_l_set_t;

#define RST_DEV_L_CLR_OFFSET 0x304
#define RST_DEV_L_CLR_RESET  0x3FFFFEC9
typedef union rst_dev_l_clr_u {
    struct {
        unsigned int clr_cpu_rst:1;         /* clear reset CPU */
        unsigned int clr_cop_rst:1;         /* clear reset COP */
        unsigned int undefined_bit_2:1;
        unsigned int clr_ac97_rst:1;        /* clear reset AC97 Controller */
        unsigned int clr_rtc_rst:1;         /* clear reset RTC Controller */
        unsigned int clr_tmr_rst:1;         /* clear reset Timer Controller */
        unsigned int clr_uart1_rst:1;       /* clear reset UART1 Controller */
        unsigned int clr_uart2_rst:1;       /* clear reset UART2/VFIR Controller */
        unsigned int clr_gpio_rst:1;        /* clear reset GPIO Controller */
        unsigned int clr_sdmmc2_rst:1;      /* clear reset SDMMC2 Controller */
        unsigned int clr_spdif_rst:1;       /* clear reset SPDIF Controller */
        unsigned int clr_i2s1_rst:1;        /* clear reset I2S 1 Controller */
        unsigned int clr_i2c1_rst:1;        /* clear reset I2C1 Controller */
        unsigned int clr_ndflash_rst:1;     /* clear reset NAND flash controller */
        unsigned int clr_sdmmc1_rst:1;      /* clear reset SDMMC1 controller */
        unsigned int clr_sdmmc4_rst:1;      /* clear reset SDMMC4 controller */
        unsigned int clr_twc_rst:1;         /* clear reset Three Wire Controller */
        unsigned int clr_pwm_rst:1;         /* clear reset Pulse Width Modulator */
        unsigned int clr_i2s2_rst:1;        /* clear reset I2S 2 Controller */
        unsigned int clr_epp_rst:1;         /* clear reset EPP controller */
        unsigned int clr_vi_rst:1;          /* clear reset VI controller */
        unsigned int clr_2d_rst:1;          /* clear reset 2D graphics engine controller */
        unsigned int clr_usbd_rst:1;        /* clear reset USB controller */
        unsigned int clr_isp_rst:1;         /* clear reset ISP controller */
        unsigned int clr_3d_rst:1;          /* clear reset 3D controller */
        unsigned int clr_ide_rst:1;         /* clear reset IDE controller */
        unsigned int clr_disp2_rst:1;       /* clear reset DISP2 controller */
        unsigned int clr_disp1_rst:1;       /* clear reset DISP1 controller */
        unsigned int clr_host1x_rst:1;      /* clear reset HOST1X */
        unsigned int clr_vcp_rst:1;         /* clear reset vector co-processor */
        unsigned int undefined_bit_30:1;
        unsigned int clr_cache2_rst:1;      /* clear reset COP cache controller */
    };

    uint32_t reg32;
} rst_dev_l_clr_t;

#define RST_DEV_H_SET_OFFSET 0x308
#define RST_DEV_H_SET_RESET  0xFEFFFB77
typedef union rst_dev_h_set_u {
    struct {
        unsigned int set_mem_rst:1;         /* set reset MC */
        unsigned int set_ahbdma_rst:1;      /* set reset AHB-DMA */
        unsigned int set_apbdma_rst:1;      /* set reset APB-DMA */
        unsigned int undefined_bit_3:1;
        unsigned int set_kbc_rst:1;         /* set reset Keyboard controller. */
        unsigned int set_stat_mon_rst:1;    /* set reset statistic monitor */
        unsigned int set_pmc_rst:1;         /* set reset PMC controller. */
        unsigned int set_fuse_rst:1;        /* set reset Fuse controller. */
        unsigned int set_kfuse_rst:1;       /* set reset KFuse controller */
        unsigned int set_sbc1_rst:1;        /* set reset SBC 1 (SPI 1) Controller */
        unsigned int set_snor_rst:1;        /* set reset NOR Flash Controller */
        unsigned int set_spi1_rst:1;        /* set reset SPI 1 Controller */
        unsigned int set_sbc2_rst:1;        /* set reset SBC 2 (SPI 2) Controller */
        unsigned int set_xio_rst:1;         /* set reset XIO controller */
        unsigned int set_sbc3_rst:1;        /* set reset SBC 3 (SPI 3) Controller */
        unsigned int set_dvc_i2c_rst:1;     /* set reset DVC-I2C Controller */
        unsigned int set_dsi_rst:1;         /* set reset DSI controller */
        unsigned int set_tvo_rst:1;         /* set reset TVO/CVE controller */
        unsigned int set_mipi_rst:1;        /* set reset MIPI base-band controller */
        unsigned int set_hdmi_rst:1;        /* set reset HDMI */
        unsigned int set_csi_rst:1;         /* set reset CSI controller */
        unsigned int set_tvdac_rst:1;       /* set reset TVDAC controller */
        unsigned int set_i2c2_rst:1;        /* set reset I2C 2 controller */
        unsigned int set_uart3_rst:1;       /* set reset UART3 Controller */
        unsigned int undefined_bit_24:1;
        unsigned int set_emc_rst:1;         /* set reset EMC controller */
        unsigned int set_usb2_rst:1;        /* set reset USB2 controller */
        unsigned int set_usb3_rst:1;        /* set reset USB3 controller */
        unsigned int set_mpe_rst:1;         /* set reset MPE controller */
        unsigned int set_vde_rst:1;         /* set reset VDE controller */
        unsigned int set_bsea_rst:1;        /* set reset BSEA controller */
        unsigned int set_bsev_rst:1;        /* set reset BSEV controller */
    };

    uint32_t reg32;
} rst_dev_h_set_t;

#define RST_DEV_H_CLR_OFFSET 0x30C
#define RST_DEV_H_CLR_RESET  0xFEFFFB77
typedef union rst_dev_h_clr_u {
    struct {
        unsigned int clr_mem_rst:1;         /* clear reset MC */
        unsigned int clr_ahbdma_rst:1;      /* clear reset AHB-DMA */
        unsigned int clr_apbdma_rst:1;      /* clear reset APB-DMA */
        unsigned int undefined_bit_3:1;
        unsigned int clr_kbc_rst:1;         /* clear reset Keyboard controller. */
        unsigned int clr_stat_mon_rst:1;    /* clear reset statistic monitor */
        unsigned int clr_pmc_rst:1;         /* clear reset PMC controller. */
        unsigned int clr_fuse_rst:1;        /* clear reset Fuse controller. */
        unsigned int clr_kfuse_rst:1;       /* clear reset KFuse controller */
        unsigned int clr_sbc1_rst:1;        /* clear reset SBC 1 (SPI 1) Controller */
        unsigned int clr_snor_rst:1;        /* clear reset NOR Flash Controller */
        unsigned int clr_spi1_rst:1;        /* clear reset SPI 1 Controller */
        unsigned int clr_sbc2_rst:1;        /* clear reset SBC 2 (SPI 2)Controller */
        unsigned int clr_xio_rst:1;         /* clear reset XIO controller */
        unsigned int clr_sbc3_rst:1;        /* clear reset SBC 3 (SPI 3) Controller */
        unsigned int clr_dvc_i2c_rst:1;     /* clear reset DVC-I2C Controller */
        unsigned int clr_dsi_rst:1;         /* clear reset DSI controller */
        unsigned int clr_tvo_rst:1;         /* clear reset TVO/CVE controller */
        unsigned int clr_mipi_rst:1;        /* clear reset MIPI base-band controller */
        unsigned int clr_hdmi_rst:1;        /* clear reset HDMI */
        unsigned int clr_csi_rst:1;         /* clear reset CSI controller */
        unsigned int clr_tvdac_rst:1;       /* clear reset TVDAC controller */
        unsigned int clr_i2c2_rst:1;        /* clear reset I2C 2 controller */
        unsigned int clr_uart3_rst:1;       /* clear reset UART3 Controller */
        unsigned int undefined_bit_24:1;
        unsigned int clr_emc_rst:1;         /* clear reset EMC controller */
        unsigned int clr_usb2_rst:1;        /* clear reset USB2 controller */
        unsigned int clr_usb3_rst:1;        /* clear reset USB3 controller */
        unsigned int clr_mpe_rst:1;         /* clear reset MPE controller */
        unsigned int clr_vde_rst:1;         /* clear reset VDE controller */
        unsigned int clr_bsea_rst:1;        /* clear reset BSEA controller */
        unsigned int clr_bsev_rst:1;        /* clear reset BSEV controller */
    };

    uint32_t reg32;
} rst_dev_h_clr_t;

#define RST_DEV_U_SET_OFFSET 0x310
#define RST_DEV_U_SET_RESET  0x000005FF
typedef union rst_dev_u_set_u {
    struct {
        unsigned int set_speedo_rst:1;      /* set reset SPEEDO controller */
        unsigned int set_uart4_rst:1;       /* set reset UART4 controller */
        unsigned int set_uart5_rst:1;       /* set reset UART5 controller */
        unsigned int set_i2c3_rst:1;        /* set reset I2C3 controller */
        unsigned int set_sbc4_rst:1;        /* set reset SBC4 (SPI 4) controller */
        unsigned int set_sdmmc3_rst:1;      /* set reset SDMMC3 controller */
        unsigned int set_pcie_rst:1;        /* set reset PCIE controller */
        unsigned int set_owr_rst:1;         /* set reset OWR controller */
        unsigned int set_afi_rst:1;         /* set reset AFI controller */
        unsigned int set_csite_rst:1;       /* set reset CSITE controller */
        unsigned int set_pciexclk_rst:1;    /* set reset PCIEXCLK logic */
        unsigned int set_avpucq_rst:1;      /* set reset AVPUCQ logic */
        unsigned int set_la_rst:1;          /* set reset LA logic. */
        unsigned int undefined_bits_13_31:19;
    };

    uint32_t reg32;
} rst_dev_u_set_t;

#define RST_DEV_U_CLR_OFFSET 0x314
#define RST_DEV_U_CLR_RESET  0x000005FF
typedef union rst_dev_u_clr_u {
    struct {
        unsigned int clr_speedo_rst:1;      /* clear reset SPEEDO controller */
        unsigned int clr_uart4_rst:1;       /* clear reset UART4 controller */
        unsigned int clr_uart5_rst:1;       /* clear reset UART5 controller */
        unsigned int clr_i2c3_rst:1;        /* clear reset I2C3 controller */
        unsigned int clr_sbc4_rst:1;        /* clear reset SBC4 (SPI 4) controller */
        unsigned int clr_sdmmc3_rst:1;      /* clear reset SDMMC3 controller */
        unsigned int clr_pcie_rst:1;        /* clear reset PCIE controller */
        unsigned int clr_owr_rst:1;         /* clear reset OWR controller */
        unsigned int clr_afi_rst:1;         /* clear reset AFI controller */
        unsigned int clr_csite_rst:1;       /* clear reset CSITE controller */
        unsigned int clr_pciexclk_rst:1;    /* clear reset PCIEXCLK logic */
        unsigned int clr_avpucq_rst:1;      /* clear reset AVPUCQ logic */
        unsigned int clr_la_rst:1;          /* clear reset LA logic. */
        unsigned int undefined_bits_13_31:19;
    };

    uint32_t reg32;
} rst_dev_u_clr_t;

#define CLK_ENB_L_SET_OFFSET 0x320
#define CLK_ENB_L_SET_RESET  0x80000130
typedef union clk_enb_l_set_u {
    struct {
        unsigned int set_clk_enb_cpu:1;     /* set enable clock to CPU */
        unsigned int undefined_bits_1_2:2;
        unsigned int set_clk_enb_ac97:1;    /* set enable clock to AC97 Controller */
        unsigned int set_clk_enb_rtc:1;     /* set enable clock to RTC Controller */
        unsigned int set_clk_enb_tmr:1;     /* set enable clock to Timer Controller */
        unsigned int set_clk_enb_uart1:1;   /* set enable clock to UART1 Controller */
        unsigned int set_clk_enb_uart2:1;   /* set enable clock to UART2/VFIR Controller */
        unsigned int set_clk_enb_gpio:1;    /* set enable clock to GPIO Controller */
        unsigned int set_clk_enb_sdmmc2:1;  /* set enable clock to SDMMC2 controller */
        unsigned int set_clk_enb_spdif:1;   /* set enable clock to SPDIF Controller */
        unsigned int set_clk_enb_i2s1:1;    /* set enable clock to I2S1 Controller */
        unsigned int set_clk_enb_i2c1:1;    /* set enable clock to I2C1 Controller */
        unsigned int set_clk_enb_ndflash:1; /* set enable clock to NAND flash controller */
        unsigned int set_clk_enb_sdmmc1:1;  /* set enable clock to SDMMC1 controller */
        unsigned int set_clk_enb_sdmmc4:1;  /* set enable clock to SDMMC4 controller */
        unsigned int set_clk_enb_twc:1;     /* set enable clock to 3-Wire Interface Controller */
        unsigned int set_clk_enb_pwm:1;     /* set enable clock to PWM (Pulse Width Modulator) */
        unsigned int set_clk_enb_i2s2:1;    /* set enable clock to I2S 2 controller */
        unsigned int set_clk_enb_epp:1;     /* set enable clock to EPP controller */
        unsigned int set_clk_enb_vi:1;      /* set enable clock to VI controller */
        unsigned int set_clk_enb_2d:1;      /* set enable clock to 2D graphics engine */
        unsigned int set_clk_enb_usbd:1;    /* set enable clock to USB controller */
        unsigned int set_clk_enb_isp:1;     /* set enable clock to ISP controller */
        unsigned int set_clk_enb_3d:1;      /* set enable clock to 3D controller */
        unsigned int set_clk_enb_ide:1;     /* set enable clock to IDE controller */
        unsigned int set_clk_enb_disp2:1;   /* set enable clock to DISP2 controller */
        unsigned int set_clk_enb_disp1:1;   /* set enable clock to DISP1 controller */
        unsigned int set_clk_enb_host1x:1;  /* set enable clock to HOST1X */
        unsigned int set_clk_enb_vcp:1;     /* set enable clock to vector co-processor */
        unsigned int undefined_bit_30:1;
        unsigned int set_clk_enb_cache2:1;  /* set enable clock to COP cache controller */
    };

    uint32_t reg32;
} clk_enb_l_set_t;

#define CLK_ENB_L_CLR_OFFSET 0x324
#define CLK_ENB_L_CLR_RESET  0x80000130
typedef union clk_enb_l_clr_u {
    struct {
        unsigned int clr_clk_enb_cpu:1;     /* clear enable clock to CPU */
        unsigned int undefined_bits_1_2:2;
        unsigned int clr_clk_enb_ac97:1;    /* clear enable clock to AC97 Controller */
        unsigned int clr_clk_enb_rtc:1;     /* clear enable clock to RTC Controller */
        unsigned int clr_clk_enb_tmr:1;     /* clear enable clock to Timer Controller */
        unsigned int clr_clk_enb_uart1:1;   /* clear enable clock to UART1 Controller */
        unsigned int clr_clk_enb_uart2:1;   /* clear enable clock to UART2/VFIR Controller */
        unsigned int clr_clk_enb_gpio:1;    /* clear enable clock to GPIO Controller */
        unsigned int clr_clk_enb_sdmmc2:1;  /* clear enable clock to SDMMC2 controller */
        unsigned int clr_clk_enb_spdif:1;   /* clear enable clock to SPDIF Controller */
        unsigned int clr_clk_enb_i2s1:1;    /* clear enable clock to I2S1 Controller */
        unsigned int clr_clk_enb_i2c1:1;    /* clear enable clock to I2C1 Controller */
        unsigned int clr_clk_enb_ndflash:1; /* clear enable clock to NAND flash controller */
        unsigned int clr_clk_enb_sdmmc1:1;  /* clear enable clock to SDMMC1 controller */
        unsigned int clr_clk_enb_sdmmc4:1;  /* clear enable clock to SDMMC4 controller */
        unsigned int clr_clk_enb_twc:1;     /* clear enable clock to 3-Wire Interface Controller */
        unsigned int clr_clk_enb_pwm:1;     /* clear enable clock to PWM (Pulse Width Modulator) */
        unsigned int clr_clk_enb_i2s2:1;    /* clear enable clock to I2S 2 controller */
        unsigned int clr_clk_enb_epp:1;     /* clear enable clock to EPP controller */
        unsigned int clr_clk_enb_vi:1;      /* clear enable clock to VI controller */
        unsigned int clr_clk_enb_2d:1;      /* clear enable clock to 2D graphics engine */
        unsigned int clr_clk_enb_usbd:1;    /* clear enable clock to USB controller */
        unsigned int clr_clk_enb_isp:1;     /* clear enable clock to ISP controller */
        unsigned int clr_clk_enb_3d:1;      /* clear enable clock to 3D controller */
        unsigned int clr_clk_enb_ide:1;     /* clear enable clock to IDE controller */
        unsigned int clr_clk_enb_disp2:1;   /* clear enable clock to DISP2 controller */
        unsigned int clr_clk_enb_disp1:1;   /* clear enable clock to DISP1 controller */
        unsigned int clr_clk_enb_host1x:1;  /* clear enable clock to HOST1X */
        unsigned int clr_clk_enb_vcp:1;     /* clear enable clock to vector co-processor */
        unsigned int undefined_bit_30:1;
        unsigned int clr_clk_enb_cache2:1;  /* clear enable clock to COP cache controller */
    };

    uint32_t reg32;
} clk_enb_l_clr_t;

#define CLK_ENB_H_SET_OFFSET 0x328
#define CLK_ENB_H_SET_RESET  0x00000400
typedef union clk_enb_h_set_u {
    struct {
        unsigned int set_clk_enb_mem:1;     /* set enable clock to MC/EMC */
        unsigned int set_clk_enb_ahbdma:1;  /* set enable clock to AHB-DMA */
        unsigned int set_clk_enb_apbdma:1;  /* set enable clock to APB-DMA */
        unsigned int undefined_bit_3:1;
        unsigned int set_clk_enb_kbc:1;     /* set enable clock to keyboard controller */
        unsigned int set_clk_enb_stat_mon:1;/* set enable clock to statistic monitor */
        unsigned int set_clk_enb_pmc:1;     /* set enable clock to PMC controller */
        unsigned int set_clk_enb_fuse:1;    /* set enable clock to FUSE controller */
        unsigned int set_clk_enb_kfuse:1;   /* set enable clock to KFUSE controller */
        unsigned int set_clk_enb_sbc1:1;    /* set enable clock to SBC 1 (SPI 1) Controller */
        unsigned int set_clk_enb_snor:1;    /* set enable clock to NOR Flash Controller */
        unsigned int set_clk_enb_spi1:1;    /* set enable clock to SPI 1 Controller */
        unsigned int set_clk_enb_sbc2:1;    /* set enable clock to SBC 2 (SPI 2) Controller */
        unsigned int set_clk_enb_xio:1;     /* set enable clock to XIO Controller */
        unsigned int set_clk_enb_sbc3:1;    /* set enable clock to SBC 3 (SPI 3) Controller */
        unsigned int set_clk_enb_dvc_i2c:1; /* set enable clock to DVC-I2C Controller */
        unsigned int set_clk_enb_dsi:1;     /* set enable clock to DSI controller */
        unsigned int set_clk_enb_tvo:1;     /* set enable clock to TVO/CVE controller */
        unsigned int set_clk_enb_mipi:1;    /* set enable clock to MIPI base-band controller */
        unsigned int set_clk_enb_hdmi:1;    /* set enable clock to HDMI */
        unsigned int set_clk_enb_csi:1;     /* set enable clock to CSI controller */
        unsigned int set_clk_enb_tvdac:1;   /* set enable clock to TVDAC controller */
        unsigned int set_clk_enb_i2c2:1;    /* set enable clock to I2C2 controller */
        unsigned int set_clk_enb_uart3:1;   /* set enable clock to UART3 Controller */
        unsigned int undefined_bit_24:1;
        unsigned int set_clk_enb_emc:1;     /* set enable clock to EMC controller */
        unsigned int set_clk_enb_usb2:1;    /* set enable clock to USB2 controller */
        unsigned int set_clk_enb_usb3:1;    /* set enable clock to USB3 controller */
        unsigned int set_clk_enb_mpe:1;     /* set enable clock to MPE controller */
        unsigned int set_clk_enb_vde:1;     /* set enable clock to VDE Controller */
        unsigned int set_clk_enb_bsea:1;    /* set enable clock to BSEA Controller */
        unsigned int set_clk_enb_bsev:1;    /* set enable clock to BSEV Controller */
    };

    uint32_t reg32;
} clk_enb_h_set_t;

#define CLK_ENB_H_CLR_OFFSET 0x32C
#define CLK_ENB_H_CLR_RESET  0x00000400
typedef union clk_enb_h_clr_u {
    struct {
        unsigned int clr_clk_enb_mem:1;     /* clear enable clock to MC/EMC */
        unsigned int clr_clk_enb_ahbdma:1;  /* clear enable clock to AHB-DMA */
        unsigned int clr_clk_enb_apbdma:1;  /* clear enable clock to APB-DMA */
        unsigned int undefined_bit_3:1;
        unsigned int clr_clk_enb_kbc:1;     /* clear enable clock to keyboard controller */
        unsigned int clr_clk_enb_stat_mon:1;/* clear enable clock to statistic monitor */
        unsigned int clr_clk_enb_pmc:1;     /* clear enable clock to PMC controller */
        unsigned int clr_clk_enb_fuse:1;    /* clear enable clock to FUSE controller */
        unsigned int clr_clk_enb_kfuse:1;   /* clear enable clock to KFUSE controller */
        unsigned int clr_clk_enb_sbc1:1;    /* clear enable clock to SBC 1 (SPI 1) Controller */
        unsigned int clr_clk_enb_snor:1;    /* clear enable clock to NOR Flash Controller */
        unsigned int clr_clk_enb_spi1:1;    /* clear enable clock to SPI 1 Controller */
        unsigned int clr_clk_enb_sbc2:1;    /* clear enable clock to SBC 2 (SPI 2) Controller */
        unsigned int clr_clk_enb_xio:1;     /* clear enable clock to XIO Controller */
        unsigned int clr_clk_enb_sbc3:1;    /* clear enable clock to SBC 3 (SPI 3) Controller */
        unsigned int clr_clk_enb_dvc_i2c:1; /* clear enable clock to DVC-I2C Controller */
        unsigned int clr_clk_enb_dsi:1;     /* clear enable clock to DSI controller */
        unsigned int clr_clk_enb_tvo:1;     /* clear enable clock to TVO/CVE controller */
        unsigned int clr_clk_enb_mipi:1;    /* clear enable clock to MIPI base-band controller */
        unsigned int clr_clk_enb_hdmi:1;    /* clear enable clock to HDMI */
        unsigned int clr_clk_enb_csi:1;     /* clear enable clock to CSI controller */
        unsigned int clr_clk_enb_tvdac:1;   /* clear enable clock to TVDAC controller */
        unsigned int clr_clk_enb_i2c2:1;    /* clear enable clock to I2C2 controller */
        unsigned int clr_clk_enb_uart3:1;   /* clear enable clock to UART3 Controller */
        unsigned int undefined_bit_24:1;
        unsigned int clr_clk_enb_emc:1;     /* clear enable clock to EMC controller */
        unsigned int clr_clk_enb_usb2:1;    /* clear enable clock to USB2 controller */
        unsigned int clr_clk_enb_usb3:1;    /* clear enable clock to USB3 controller */
        unsigned int clr_clk_enb_mpe:1;     /* clear enable clock to MPE controller */
        unsigned int clr_clk_enb_vde:1;     /* clear enable clock to VDE Controller */
        unsigned int clr_clk_enb_bsea:1;    /* clear enable clock to BSEA Controller */
        unsigned int clr_clk_enb_bsev:1;    /* clear enable clock to BSEV Controller */
    };

    uint32_t reg32;
} clk_enb_h_clr_t;

#define CLK_ENB_U_SET_OFFSET 0x330
#define CLK_ENB_U_SET_RESET  0x07F00A00
typedef union clk_enb_u_set_u {
    struct {
        unsigned int set_clk_enb_speedo:1;  /* set enable clock to SPEEDO */
        unsigned int set_clk_enb_uart4:1;   /* set enable clock to UART4 */
        unsigned int set_clk_enb_uart5:1;   /* set enable clock to UART5 */
        unsigned int set_clk_enb_i2c3:1;    /* set enable clock to I2C3 */
        unsigned int set_clk_enb_sbc4:1;    /* set enable clock to SBC4 (SPI 4) */
        unsigned int set_clk_enb_sdmmc3:1;  /* set enable clock to SDMMC3 */
        unsigned int set_clk_enb_pcie:1;    /* set enable clock to PCIE */
        unsigned int set_clk_enb_owr:1;     /* set enable clock to OWR */
        unsigned int set_clk_enb_afi:1;     /* set enable clock to AFI */
        unsigned int set_clk_enb_csite:1;   /* set enable clock to CSITE */
        unsigned int undefined_bit_10:1;
        unsigned int set_clk_enb_avpucq:1;  /* set enable clock to AVPUCQ */
        unsigned int set_clk_enb_la:1;      /* set enable clock to LA. */
        unsigned int undefined_bits_13_19:7;
        unsigned int set_clk_enb_irama:1;   /* set enable IRAMB clk */
        unsigned int set_clk_enb_iramb:1;   /* set enable IRAMB clk */
        unsigned int set_clk_enb_iramc:1;   /* set enable IRAMC clk */
        unsigned int set_clk_enb_iramd:1;   /* set enable IRAMD clk */
        unsigned int set_clk_enb_cram2:1;   /* set enable COP cache ram clk */
        unsigned int set_sync_clk_doubler_enb:1;/* set enable audio sync clk doubler */
        unsigned int set_clk_m_doubler_enb:1;/* set enable CLK_M clk doubler */
        unsigned int undefined_bit_27:1;
        unsigned int set_clk_enb_sus_out:1; /* set enable clock to SUS pad */
        unsigned int set_clk_enb_dev2_out:1;/* set enable clock to DEV2 pad */
        unsigned int set_clk_enb_dev1_out:1;/* set enable clock to DEV1 pad */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} clk_enb_u_set_t;

#define CLK_ENB_U_CLR_OFFSET 0x334
#define CLK_ENB_U_CLR_RESET  0x07F00A00
typedef union clk_enb_u_clr_u {
    struct {
        unsigned int clr_clk_enb_speedo:1;  /* clear enable clock to SPEEDO */
        unsigned int clr_clk_enb_uart4:1;   /* clear enable clock to UART4 */
        unsigned int clr_clk_enb_uart5:1;   /* clear enable clock to UART5 */
        unsigned int clr_clk_enb_i2c3:1;    /* clear enable clock to I2C3 */
        unsigned int clr_clk_enb_sbc4:1;    /* clear enable clock to SBC4 (SPI 4) */
        unsigned int clr_clk_enb_sdmmc3:1;  /* clear enable clock to SDMMC3 */
        unsigned int clr_clk_enb_pcie:1;    /* clear enable clock to PCIE */
        unsigned int clr_clk_enb_owr:1;     /* clear enable clock to OWR */
        unsigned int clr_clk_enb_afi:1;     /* clear enable clock to AFI */
        unsigned int clr_clk_enb_csite:1;   /* clear enable clock to CSITE */
        unsigned int undefined_bit_10:1;
        unsigned int clr_clk_enb_avpucq:1;  /* clear enable clock to AVPUCQ */
        unsigned int clr_clk_enb_la:1;      /* clear enable clock to LA. */
        unsigned int undefined_bits_13_19:7;
        unsigned int clr_clk_enb_irama:1;   /* clear enable IRAMB clk */
        unsigned int clr_clk_enb_iramb:1;   /* clear enable IRAMB clk */
        unsigned int clr_clk_enb_iramc:1;   /* clear enable IRAMC clk */
        unsigned int clr_clk_enb_iramd:1;   /* clear enable IRAMD clk */
        unsigned int clr_clk_enb_cram2:1;   /* clear enable COP cache ram clk */
        unsigned int clr_sync_clk_doubler_enb:1;/* clear enable audio sync clk doubler */
        unsigned int clr_clk_m_doubler_enb:1;/* clear enable CLK_M clk doubler */
        unsigned int undefined_bit_27:1;
        unsigned int clr_clk_enb_sus_out:1; /* clear enable clock to SUS pad */
        unsigned int clr_clk_enb_dev2_out:1;/* clear enable clock to DEV2 pad */
        unsigned int clr_clk_enb_dev1_out:1;/* clear enable clock to DEV1 pad */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} clk_enb_u_clr_t;

#define RST_CPU_CMPLX_SET_OFFSET 0x340
#define RST_CPU_CMPLX_SET_RESET  0x00002222
typedef union rst_cpu_cmplx_set_u {
    struct {
        unsigned int set_cpureset0:1;       /* 1 = assert nCPURESET to CPU0 */
        unsigned int set_cpureset1:1;       /* 1 = assert nCPURESET to CPU1 */
        unsigned int undefined_bits_2_3:2;
        unsigned int set_dereset0:1;        /* 1 = assert nDERESET to CPU0 */
        unsigned int set_dereset1:1;        /* 1 = assert nDERESET to CPU1 */
        unsigned int undefined_bits_6_7:2;
        unsigned int set_wdreset0:1;        /* 1 = assert nWDRESET to CPU0 */
        unsigned int set_wdreset1:1;        /* 1 = assert nWDRESET to CPU1 */
        unsigned int undefined_bits_10_11:2;
        unsigned int set_dbgreset0:1;       /* 1 = assert nDBGRESET to CPU0 */
        unsigned int set_dbgreset1:1;       /* 1 = assert nDBGRESET to CPU1 */
        unsigned int undefined_bits_14_27:14;
        unsigned int set_periphreset:1;     /* 1 = assert nPERIPHRESET to the CPU */
        unsigned int set_scureset:1;        /* 1 = assert nSCURESET to the SCU */
        unsigned int set_presetdbg:1;       /* 1 = assert nPRESETDBG to the coresight */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} rst_cpu_cmplx_set_t;

#define RST_CPU_CMPLX_CLR_OFFSET 0x344
#define RST_CPU_CMPLX_CLR_RESET  0x00002222
typedef union rst_cpu_cmplx_clr_u {
    struct {
        unsigned int clr_cpureset0:1;       /* 1 = deassert nCPURESET to CPU0 */
        unsigned int clr_cpureset1:1;       /* 1 = deassert nCPURESET to CPU1 */
        unsigned int undefined_bits_2_3:2;
        unsigned int clr_dereset0:1;        /* 1 = deassert nDERESET to CPU0 */
        unsigned int clr_dereset1:1;        /* 1 = deassert nDERESET to CPU1 */
        unsigned int undefined_bits_6_7:2;
        unsigned int clr_wdreset0:1;        /* 1 = deassert nWDRESET to CPU0 */
        unsigned int clr_wdreset1:1;        /* 1 = deassert nWDRESET to CPU1 */
        unsigned int undefined_bits_10_11:2;
        unsigned int clr_dbgreset0:1;       /* 1 = deassert nDBGRESET to CPU0 */
        unsigned int clr_dbgreset1:1;       /* 1 = deassert nDBGRESET to CPU1 */
        unsigned int undefined_bits_14_27:14;
        unsigned int clr_periphreset:1;     /* 1 = deassert nPERIPHRESET to the CPU's interrupt/timer */
        unsigned int clr_scureset:1;        /* 1 = deassert nSCURESET to the SCU */
        unsigned int clr_presetdbg:1;       /* 1 = deassert nPRESETDBG to the coresight */
        unsigned int undefined_bit_31:1;
    };

    uint32_t reg32;
} rst_cpu_cmplx_clr_t;

#define CLK_SOURCE_LA_OFFSET 0x1F8
#define CLK_SOURCE_LA_RESET  0xC0000000
typedef union clk_source_la_u {
    struct {
        unsigned int la_clk_divisor:8;      /*  N = Divide by (n+1) (lsb denote 0.5x) */
        unsigned int undefined_bits_8_29:22;
        unsigned int la_clk_src:2;          /*  00 = pllP_out0  01 = pllC_out0  10 = pllM_out0  11 = clk_m */
    };

    uint32_t reg32;
} clk_source_la_t;

#endif // TEGRA_CAR_H
