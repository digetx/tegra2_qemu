/*
 * ARM NVIDIA Tegra2 emulation.
 *
 * Copyright (c) 2014-2015 Dmitry Osipenko <digetx@gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, see <http://www.gnu.org/licenses/>.
 */

/* Autogenerated from TRM v02p */

#ifndef TEGRA_PMC_H
#define TEGRA_PMC_H

#define CNTRL_OFFSET 0x0
#define CNTRL_RESET  0x00000000
typedef union cntrl_u {
    struct {
        unsigned int kbc_clk_dis:1;         /* Disable 32KHz clock to KBC; 0 = DISABLE; 1 = ENABLE */
        unsigned int rtc_clk_dis:1;         /* Disable 32KHz clock to RTC; 0 = DISABLE; 1 = ENABLE */
        unsigned int rtc_rst:1;             /* Software reset to RTC; 0 = DISABLE; 1 = ENABLE */
        unsigned int kbc_rst:1;             /* Software reset to KBC; 0 = DISABLE; 1 = ENABLE */
        unsigned int main_rst:1;            /* Reset to CAR; 0 = DISABLE; 1 = ENABLE */
        unsigned int latchwake_en:1;        /* Enables latching wakeup events on transition from 1 to 0(sequence - set to 1,set to 0); 0 = DISABLE; 1 = ENABLE */
        unsigned int glitchdet_dis:1;       /* Disable detecting glitch on wake-up event; 0 = DISABLE; 1 = ENABLE */
        unsigned int blink_en:1;            /* Enables blinking counter and blink output  (on CLK_32K_OUT pin); 0 = DISABLE; 1 = ENABLE */
        unsigned int pwrreq_polarity:1;     /* Inverts CORE_PWR_REQ polarity; 0 = NORMAL; 1 = INVERT */
        unsigned int pwrreq_oe:1;           /* CORE_PWR_REQ output enable. resets to tristate; 0 = DISABLE; 1 = ENABLE */
        unsigned int sysclk_polarity:1;     /* Inverts SYS_CLK_REQ enable polarity; 0 = NORMAL; 1 = INVERT */
        unsigned int sysclk_oe:1;           /* Enables output of system enable clock; 0 = DISABLE; 1 = ENABLE */
        unsigned int pwrgate_dis:1;         /* Disable power gating; 0 = DISABLE; 1 = ENABLE */
        unsigned int aoinit:1;              /* AO(Always On or RTC domain) initialized purely SW diagnostic and interpretation; 0 = NOTDONE; 1 = DONE */
        unsigned int side_effect_lp0:1;     /* when set causes side effect of entering Deep Sleep after powering down CPU; 0 = DISABLE; 1 = ENABLE */
        unsigned int cpupwrreq_polarity:1;  /* Inverts power request polarity 0 = NORMAL 1 = INVERT */
        unsigned int cpupwrreq_oe:1;        /* Power request output enable. resets to tri-state 0 = DISABLE 1 = ENABLE */
        unsigned int intr_polarity:1;       /* Inverts INTR polarity 0 = DISABLE 1 = ENABLE */
        unsigned int fuse_override:1;       /* Fuse override 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_19_31:13;
    };

    uint32_t reg32;
} cntrl_t;

#define SEC_DISABLE_OFFSET 0x4
#define SEC_DISABLE_RESET  0x00000000
typedef union sec_disable_u {
    struct {
        unsigned int write:1;               /* disable write to secure registers; 0 = OFF; 1 = ON */
        unsigned int read:1;                /* disable read from secure registers; 0 = OFF 1 = ON */
        unsigned int bwrite:1;              /* disable write to bondout secure registers 0 = OFF 1 = ON */
        unsigned int bread:1;               /* disable read from bondout secure registers 0 = OFF 1 = ON */
        unsigned int undefined_bits_4_31:28;
    };

    uint32_t reg32;
} sec_disable_t;

#define PMC_SWRST_OFFSET 0x8
#define PMC_SWRST_RESET  0x00000000
typedef union pmc_swrst_u {
    struct {
        unsigned int rst:1;                 /* software reset to pmc only; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} pmc_swrst_t;

#define WAKE_MASK_OFFSET 0xC
#define WAKE_MASK_RESET  0x00000000
typedef union wake_mask_u {
    struct {
        unsigned int event:16;              /* pin 0-15 wake enable; 0 = DISABLE; 1 = ENABLE */
        unsigned int rtc:1;                 /* RTC wake enable; 0 = DISABLE; 1 = ENABLE */
        unsigned int kbc:1;                 /* KBC wake enable; 0 = DISABLE; 1 = ENABLE */
        unsigned int pwr_int_n:1;           /* PWR_INT_N wake enable; 0 = DISABLE; 1 = ENABLE */
        unsigned int usb_event:4;           /* 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int event_res:8;           /* 0 = DISABLE; 1 = ENABLE */
        unsigned int reset_n:1;             /* external reset wake enable; 0 = DISABLE; 1 = ENABLE */
    };

    uint32_t reg32;
} wake_mask_t;

#define WAKE_LVL_OFFSET 0x10
#define WAKE_LVL_RESET  0x7F9FFFFF
typedef union wake_lvl_u {
    struct {
        unsigned int event:16;              /* pin 0-15 wake level; 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int rtc:1;                 /* RTC wake level; 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int kbc:1;                 /* KBC wake level; 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int pwr_int_n:1;           /* power interrupt - now permanently tied to bit 18; 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int usb_event:4;           /* 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int event_res:8;           /* 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
        unsigned int reset_n:1;             /* external reset wake level (low active!); 0 = ACTIVE_LOW; 1 = ACTIVE_HIGH */
    };

    uint32_t reg32;
} wake_lvl_t;

#define WAKE_STATUS_OFFSET 0x14
#define WAKE_STATUS_RESET  0x00000000
typedef union wake_status_u {
    struct {
        unsigned int event:16;              /* pin 0-15 wake; 0 = NOT_SET; 1 = SET */
        unsigned int rtc:1;                 /* RTC wake; 0 = NOT_SET; 1 = SET */
        unsigned int kbc:1;                 /* KBC wake; 0 = NOT_SET; 1 = SET */
        unsigned int pwr_int_n:1;           /* power interrupt; 0 = NOT_SET; 1 = SET */
        unsigned int usb_event:4;           /* USB wake events; 0 = NOT_SET; 1 = SET */
        unsigned int event_res:8;           /* 0 = NOT_SET; 1 = SET */
        unsigned int reset_n:1;             /* external reset; 0 = NOT_SET; 1 = SET */
    };

    uint32_t reg32;
} wake_status_t;

#define SW_WAKE_STATUS_OFFSET 0x18
#define SW_WAKE_STATUS_RESET  0x00000000
typedef union sw_wake_status_u {
    struct {
        unsigned int event:16;              /* pin 0-15 wake; 0 = DISABLE; 1 = ENABLE */
        unsigned int rtc:1;                 /* RTC wake; 0 = DISABLE; 1 = ENABLE */
        unsigned int kbc:1;                 /* KBC wake; 0 = DISABLE; 1 = ENABLE */
        unsigned int pwr_int:1;             /* power interrupt; 0 = NOT_SET; 1 = SET */
        unsigned int usb_event:4;           /* USB wake events; 0 = NOT_SET; 1 = SET */
        unsigned int event_res:8;           /* 0 = NOT_SET; 1 = SET */
        unsigned int reset_n:1;             /* external reset; 0 = NOT_SET; 1 = SET */
    };

    uint32_t reg32;
} sw_wake_status_t;

#define DPD_PADS_ORIDE_OFFSET 0x1C
#define DPD_PADS_ORIDE_RESET  0x00200000
typedef union dpd_pads_oride_u {
    struct {
        unsigned int kbc_row0:1;            /* override dpd idle state with row 0 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row1:1;            /* override dpd idle state with row 1 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row2:1;            /* override dpd idle state with row 2 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row3:1;            /* override dpd idle state with row 3 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row4:1;            /* override dpd idle state with row 4 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row5:1;            /* override dpd idle state with row 5 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row6:1;            /* override dpd idle state with row 6 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row7:1;            /* override dpd idle state with row 7 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row8:1;            /* override dpd idle state with row 8 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row9:1;            /* override dpd idle state with row 9 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row10:1;           /* override dpd idle state with row 10 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row11:1;           /* override dpd idle state with row 11 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row12:1;           /* override dpd idle state with row 12 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row13:1;           /* override dpd idle state with row 13 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row14:1;           /* override dpd idle state with row 14 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_row15:1;           /* override dpd idle state with row 15 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col0:1;            /* override dpd idle state with column 0 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col1:1;            /* override dpd idle state with column 1 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col2:1;            /* override dpd idle state with column 2 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col3:1;            /* override dpd idle state with column 3 output 0 = DISABLE 1 = ENABLE */
        unsigned int blink:1;               /* override dpd idle state with blink ouptut 0 = DISABLE 1 = ENABLE */
        unsigned int sys_clk:1;             /* override dpd idle state with column with sys_clk_request output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col4:1;            /* override dpd idle state with column 4 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col5:1;            /* override dpd idle state with column 5 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col6:1;            /* override dpd idle state with column 6 output 0 = DISABLE 1 = ENABLE */
        unsigned int kbc_col7:1;            /* override dpd idle state with column 7 output 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_26_31:6;
    };

    uint32_t reg32;
} dpd_pads_oride_t;

#define DPD_SAMPLE_OFFSET 0x20
#define DPD_SAMPLE_RESET  0x00000000
typedef union dpd_sample_u {
    struct {
        unsigned int on:1;                  /* will set sampling of pads value; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} dpd_sample_t;

#define DPD_ENABLE_OFFSET 0x24
#define DPD_ENABLE_RESET  0x00000000
typedef union dpd_enable_u {
    struct {
        unsigned int on:1;                  /* will set sampling of pads value; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} dpd_enable_t;

#define PWRGATE_TIMER_OFF_OFFSET 0x28
#define PWRGATE_TIMER_OFF_RESET  0xECA97531
typedef union pwrgate_timer_off_u {
    struct {
        unsigned int rail0:4;               /* timer value for rail 0 */
        unsigned int rail1:4;               /* timer value for rail 1 */
        unsigned int rail2:4;               /* timer value for rail 2 */
        unsigned int rail3:4;               /* timer value for rail 3 */
        unsigned int rail4:4;               /* timer value for rail 4 */
        unsigned int rail5:4;               /* timer value for rail 5 */
        unsigned int rail6:4;               /* timer value for rail 6 */
        unsigned int rail7:4;               /* timer value for rail 7 */
    };

    uint32_t reg32;
} pwrgate_timer_off_t;

#define PWRGATE_TIMER_ON_OFFSET 0x2C
#define PWRGATE_TIMER_ON_RESET  0xECA97531
typedef union pwrgate_timer_on_u {
    struct {
        unsigned int rail0:4;               /* timer value for rail 0 */
        unsigned int rail1:4;               /* timer value for rail 1 */
        unsigned int rail2:4;               /* timer value for rail 2 */
        unsigned int rail3:4;               /* timer value for rail 3 */
        unsigned int rail4:4;               /* timer value for rail 4 */
        unsigned int rail5:4;               /* timer value for rail 5 */
        unsigned int rail6:4;               /* timer value for rail 6 */
        unsigned int rail7:4;               /* timer value for rail 7 */
    };

    uint32_t reg32;
} pwrgate_timer_on_t;

#define PWRGATE_TOGGLE_OFFSET 0x30
#define PWRGATE_TOGGLE_RESET  0x00000000
typedef union pwrgate_toggle_u {
    struct {
        unsigned int partid:3;              /* id of partition to be toggled; 0 = CPU Partition; 1 = TD (3D); 2 = Video Encode; 4 = Video Decode; 3 = PCI Express; 5 = L2 Cache; 6 = MPEG Encode */
        unsigned int undefined_bits_3_7:5;
        unsigned int start:1;               /* start power down/up; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_9_31:23;
    };

    uint32_t reg32;
} pwrgate_toggle_t;

#define REMOVE_CLAMPING_CMD_OFFSET 0x34
#define REMOVE_CLAMPING_CMD_RESET  0x00000000
typedef union remove_clamping_cmd_u {
    struct {
        unsigned int cpu:1;                 /* remove clamping to CPU; 0 = DISABLE; 1 = ENABLE */
        unsigned int td:1;                  /* remove clamping to TD; 0 = DISABLE; 1 = ENABLE */
        unsigned int ve:1;                  /* remove clamping to VE; 0 = DISABLE; 1 = ENABLE */
        unsigned int vde:1;                 /* remove clamping to VDE; 0 = DISABLE; 1 = ENABLE */
        unsigned int pcx:1;                 /* remove clamping to PCX; 0 = DISABLE; 1 = ENABLE */
        unsigned int l2c:1;                 /* remove clamping to L2_CACHE; 0 = DISABLE; 1 = ENABLE */
        unsigned int mpe:1;                 /* remove clamping to MPE_CACHE; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_7_31:25;
    };

    uint32_t reg32;
} remove_clamping_cmd_t;

#define PWRGATE_STATUS_OFFSET 0x38
#define PWRGATE_STATUS_RESET  0x00000000
typedef union pwrgate_status_u {
    struct {
        unsigned int cpu:1;                 /* status of CPU partition; 0 = OFF; 1 = ON */
        unsigned int td:1;                  /* status of TD Partition; 0 = OFF; 1 = ON */
        unsigned int ve:1;                  /* status of VE partition; 0 = OFF; 1 = ON */
        unsigned int pcx:1;                 /* status of PCX partition; 0 = OFF; 1 = ON */
        unsigned int vde:1;                 /* status of VDE partition; 0 = OFF; 1 = ON */
        unsigned int l2c:1;                 /* status of L2C partition; 0 = OFF; 1 = ON */
        unsigned int mpe:1;                 /* status of MPE partition; 0 = OFF; 1 = ON */
        unsigned int undefined_bits_7_31:25;
    };

    uint32_t reg32;
} pwrgate_status_t;

#define PWRGOOD_TIMER_OFFSET 0x3C
#define PWRGOOD_TIMER_RESET  0x0000007F
typedef union pwrgood_timer_u {
    struct {
        unsigned int power:8;
        unsigned int oscillator:8;
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} pwrgood_timer_t;

#define BLINK_TIMER_OFFSET 0x40
#define BLINK_TIMER_RESET  0xFFFFFFFF
typedef union blink_timer_u {
    struct {
        unsigned int data_on:15;            /* time on */
        unsigned int force_blink:1;         /* if 0 32khz clock */
        unsigned int data_off:16;           /* time off */
    };

    uint32_t reg32;
} blink_timer_t;

#define NO_IOPOWER_OFFSET 0x44
#define NO_IOPOWER_RESET  0x00000000
typedef union no_iopower_u {
    struct {
        unsigned int sys:1;                 /* rail ao IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int nand:1;                /* rail at3 IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int uart:1;                /* rail dbg IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int bb:1;                  /* dlcd IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int vi:1;                  /* rail dvi IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int audio:1;               /* rail i2s IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int lcd:1;                 /* rail lcd IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int mem:1;                 /* rail mem IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int sd:1;                  /* rail sd IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int dsi_csi:1;             /* rail dsi_csi  IOs; 0 = DISABLE; 1 = ENABLE */
        unsigned int undefined_bits_10_31:22;
    };

    uint32_t reg32;
} no_iopower_t;

#define PWR_DET_OFFSET 0x48
#define PWR_DET_RESET  0x000001FF
typedef union pwr_det_u {
    struct {
        unsigned int sys:1;                 /* rail ao IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int nand:1;                /* rail at3 IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int uart:1;                /* rail dbg IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int bb:1;                  /* rail dlcd IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int vi:1;                  /* rail dvi IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int audio:1;               /* rail i2s IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int lcd:1;                 /* rail lcd IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int mem:1;                 /* rail mem IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int sd:1;                  /* rail sd IOs; 0 = ENABLE; 1 = DISABLE */
        unsigned int undefined_bits_9_31:23;
    };

    uint32_t reg32;
} pwr_det_t;

#define PWR_DET_LATCH_OFFSET 0x4C
#define PWR_DET_LATCH_RESET  0x00000001
typedef union pwr_det_latch_u {
    struct {
        unsigned int latch:1;               /* power detect latch, latches value from the pads as long set to 1; 0 = ENABLE; 1 = DISABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} pwr_det_latch_t;

#define SCRATCH0_OFFSET 0x50
#define SCRATCH0_RESET  0x00000000
typedef union scratch0_u {
    struct {
        unsigned int scratch0:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch0_t;

#define SCRATCH1_OFFSET 0x54
#define SCRATCH1_RESET  0x00000000
typedef union scratch1_u {
    struct {
        unsigned int scratch1:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch1_t;

#define SCRATCH2_OFFSET 0x58
#define SCRATCH2_RESET  0x00000000
typedef union scratch2_u {
    struct {
        unsigned int scratch2:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch2_t;

#define SCRATCH3_OFFSET 0x5C
#define SCRATCH3_RESET  0x00000000
typedef union scratch3_u {
    struct {
        unsigned int scratch3:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch3_t;

#define SCRATCH4_OFFSET 0x60
#define SCRATCH4_RESET  0x00000000
typedef union scratch4_u {
    struct {
        unsigned int scratch4:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch4_t;

#define SCRATCH5_OFFSET 0x64
#define SCRATCH5_RESET  0x00000000
typedef union scratch5_u {
    struct {
        unsigned int scratch5:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch5_t;

#define SCRATCH6_OFFSET 0x68
#define SCRATCH6_RESET  0x00000000
typedef union scratch6_u {
    struct {
        unsigned int scratch6:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch6_t;

#define SCRATCH7_OFFSET 0x6C
#define SCRATCH7_RESET  0x00000000
typedef union scratch7_u {
    struct {
        unsigned int scratch7:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch7_t;

#define SCRATCH8_OFFSET 0x70
#define SCRATCH8_RESET  0x00000000
typedef union scratch8_u {
    struct {
        unsigned int scratch8:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch8_t;

#define SCRATCH9_OFFSET 0x74
#define SCRATCH9_RESET  0x00000000
typedef union scratch9_u {
    struct {
        unsigned int scratch9:32;           /* General purpose register storage */
    };

    uint32_t reg32;
} scratch9_t;

#define SCRATCH10_OFFSET 0x78
#define SCRATCH10_RESET  0x00000000
typedef union scratch10_u {
    struct {
        unsigned int scratch10:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch10_t;

#define SCRATCH11_OFFSET 0x7C
#define SCRATCH11_RESET  0x00000000
typedef union scratch11_u {
    struct {
        unsigned int scratch11:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch11_t;

#define SCRATCH12_OFFSET 0x80
#define SCRATCH12_RESET  0x00000000
typedef union scratch12_u {
    struct {
        unsigned int scratch12:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch12_t;

#define SCRATCH13_OFFSET 0x84
#define SCRATCH13_RESET  0x00000000
typedef union scratch13_u {
    struct {
        unsigned int scratch13:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch13_t;

#define SCRATCH14_OFFSET 0x88
#define SCRATCH14_RESET  0x00000000
typedef union scratch14_u {
    struct {
        unsigned int scratch14:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch14_t;

#define SCRATCH15_OFFSET 0x8C
#define SCRATCH15_RESET  0x00000000
typedef union scratch15_u {
    struct {
        unsigned int scratch15:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch15_t;

#define SCRATCH16_OFFSET 0x90
#define SCRATCH16_RESET  0x00000000
typedef union scratch16_u {
    struct {
        unsigned int scratch16:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch16_t;

#define SCRATCH17_OFFSET 0x94
#define SCRATCH17_RESET  0x00000000
typedef union scratch17_u {
    struct {
        unsigned int scratch17:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch17_t;

#define SCRATCH18_OFFSET 0x98
#define SCRATCH18_RESET  0x00000000
typedef union scratch18_u {
    struct {
        unsigned int scratch18:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch18_t;

#define SCRATCH19_OFFSET 0x9C
#define SCRATCH19_RESET  0x00000000
typedef union scratch19_u {
    struct {
        unsigned int scratch19:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch19_t;

#define SCRATCH20_OFFSET 0xA0
#define SCRATCH20_RESET  0x00000000
typedef union scratch20_u {
    struct {
        unsigned int scratch20:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch20_t;

#define SCRATCH21_OFFSET 0xA4
#define SCRATCH21_RESET  0x00000000
typedef union scratch21_u {
    struct {
        unsigned int scratch21:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch21_t;

#define SCRATCH22_OFFSET 0xA8
#define SCRATCH22_RESET  0x00000000
typedef union scratch22_u {
    struct {
        unsigned int scratch22:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch22_t;

#define SCRATCH23_OFFSET 0xAC
#define SCRATCH23_RESET  0x00000000
typedef union scratch23_u {
    struct {
        unsigned int scratch23:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch23_t;

#define SECURE_SCRATCH0_OFFSET 0xB0
#define SECURE_SCRATCH0_RESET  0x00000000
typedef union secure_scratch0_u {
    struct {
        unsigned int secure_scratch0:32;
    };

    uint32_t reg32;
} secure_scratch0_t;

#define SECURE_SCRATCH1_OFFSET 0xB4
#define SECURE_SCRATCH1_RESET  0x00000000
typedef union secure_scratch1_u {
    struct {
        unsigned int secure_scratch1:32;
    };

    uint32_t reg32;
} secure_scratch1_t;

#define SECURE_SCRATCH2_OFFSET 0xB8
#define SECURE_SCRATCH2_RESET  0x00000000
typedef union secure_scratch2_u {
    struct {
        unsigned int secure_scratch2:32;
    };

    uint32_t reg32;
} secure_scratch2_t;

#define SECURE_SCRATCH3_OFFSET 0xBC
#define SECURE_SCRATCH3_RESET  0x00000000
typedef union secure_scratch3_u {
    struct {
        unsigned int secure_scratch3:32;
    };

    uint32_t reg32;
} secure_scratch3_t;

#define SECURE_SCRATCH4_OFFSET 0xC0
#define SECURE_SCRATCH4_RESET  0x00000000
typedef union secure_scratch4_u {
    struct {
        unsigned int secure_scratch4:32;
    };

    uint32_t reg32;
} secure_scratch4_t;

#define SECURE_SCRATCH5_OFFSET 0xC4
#define SECURE_SCRATCH5_RESET  0x00000000
typedef union secure_scratch5_u {
    struct {
        unsigned int secure_scratch5:32;
    };

    uint32_t reg32;
} secure_scratch5_t;

#define CPUPWRGOOD_TIMER_OFFSET 0xC8
#define CPUPWRGOOD_TIMER_RESET  0x0000FFFF
typedef union cpupwrgood_timer_u {
    struct {
        unsigned int data:32;               /* timer data */
    };

    uint32_t reg32;
} cpupwrgood_timer_t;

#define CPUPWROFF_TIMER_OFFSET 0xCC
#define CPUPWROFF_TIMER_RESET  0x0000FFFF
typedef union cpupwroff_timer_u {
    struct {
        unsigned int data:32;               /* timer data */
    };

    uint32_t reg32;
} cpupwroff_timer_t;

#define PG_MASK_OFFSET 0xD0
#define PG_MASK_RESET  0xFFFFFFFF
typedef union pg_mask_u {
    struct {
        unsigned int td:8;                  /* Mask TD rail */
        unsigned int ve:8;                  /* Mask VE rail */
        unsigned int vd:8;                  /* Mask VDE rail */
        unsigned int px:8;                  /* Mask PCX rail */
    };

    uint32_t reg32;
} pg_mask_t;

#define PG_MASK_1_OFFSET 0xD4
#define PG_MASK_1_RESET  0x0000FF01
typedef union pg_mask_1_u {
    struct {
        unsigned int l2c:1;                 /* MASK L2C rail */
        unsigned int undefined_bits_1_7:7;
        unsigned int mpe:8;                 /* MASK MPE rail */
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} pg_mask_1_t;

#define AUTO_WAKE_LVL_OFFSET 0xD8
#define AUTO_WAKE_LVL_RESET  0x00000000
typedef union auto_wake_lvl_u {
    struct {
        unsigned int smpl:1;                /* Causes PMC to sample the wake pads 0 = DISABLE 1 = ENABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} auto_wake_lvl_t;

#define AUTO_WAKE_LVL_MASK_OFFSET 0xDC
#define AUTO_WAKE_LVL_MASK_RESET  0x00000000
typedef union auto_wake_lvl_mask_u {
    struct {
        unsigned int value:32;
    };

    uint32_t reg32;
} auto_wake_lvl_mask_t;

#define WAKE_DELAY_OFFSET 0xE0
#define WAKE_DELAY_RESET  0x00000000
typedef union wake_delay_u {
    struct {
        unsigned int value:16;
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} wake_delay_t;

#define PWR_DET_VAL_OFFSET 0xE4
#define PWR_DET_VAL_RESET  0x000001FF
typedef union pwr_det_val_u {
    struct {
        unsigned int sys:1;                 /* rail ao IOs  0 = ENABLE 1 = DISABLE */
        unsigned int nand:1;                /* rail at3 IOs  0 = ENABLE 1 = DISABLE */
        unsigned int uart:1;                /* rail dbg IOs  0 = ENABLE 1 = DISABLE */
        unsigned int bb:1;                  /* rail dlcd IOs  0 = ENABLE 1 = DISABLE */
        unsigned int vi:1;                  /* rail dvi IOs  0 = ENABLE 1 = DISABLE */
        unsigned int audio:1;               /* rail i2s IOs  0 = ENABLE 1 = DISABLE */
        unsigned int lcd:1;                 /* rail lcd IOs  0 = ENABLE 1 = DISABLE */
        unsigned int mem:1;                 /* rail mem IOs  0 = ENABLE 1 = DISABLE */
        unsigned int sd:1;                  /* rail sd IOs  0 = ENABLE 1 = DISABLE */
        unsigned int undefined_bits_9_31:23;
    };

    uint32_t reg32;
} pwr_det_val_t;

#define DDR_PWR_OFFSET 0xE8
#define DDR_PWR_RESET  0x00000001
typedef union ddr_pwr_u {
    struct {
        unsigned int val:1;                 /* 0 = E_12V 1 = E_18V */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} ddr_pwr_t;

#define USB_DEBOUNCE_DEL_OFFSET 0xEC
#define USB_DEBOUNCE_DEL_RESET  0x00000000
typedef union usb_debounce_del_u {
    struct {
        unsigned int val:16;
        unsigned int undefined_bits_16_31:16;
    };

    uint32_t reg32;
} usb_debounce_del_t;

#define USB_AO_OFFSET 0xF0
#define USB_AO_RESET  0x00000000
typedef union usb_ao_u {
    struct {
        unsigned int ub_id_pd:2;
        unsigned int vbus_wakeup_pd:2;
        unsigned int undefined_bits_4_31:28;
    };

    uint32_t reg32;
} usb_ao_t;

#define CRYPTO_OP_OFFSET 0xF4
#define CRYPTO_OP_RESET  0x00000001
typedef union crypto_op_u {
    struct {
        unsigned int val:1;                 /* Disabled by default 0 = ENABLE 1 = DISABLE */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} crypto_op_t;

#define PLLP_WB0_OVERRIDE_OFFSET 0xF8
#define PLLP_WB0_OVERRIDE_RESET  0x00000000
typedef union pllp_wb0_override_u {
    struct {
        unsigned int override_enable:1;     /* 1 = override CAR PLLP setting, 0 = no override */
        unsigned int pllp_enable:1;         /* 1 = enable PLLP, 0 = disable PLLP */
        unsigned int osc_freq:2;            /* 00 = 13MHz, 01 = 19.2MHz, 10 = 12MHz, 11 = 26MHz */
        unsigned int undefined_bits_4_31:28;
    };

    uint32_t reg32;
} pllp_wb0_override_t;

#define SCRATCH24_OFFSET 0xFC
#define SCRATCH24_RESET  0x00000000
typedef union scratch24_u {
    struct {
        unsigned int scratch24:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch24_t;

#define SCRATCH25_OFFSET 0x100
#define SCRATCH25_RESET  0x00000000
typedef union scratch25_u {
    struct {
        unsigned int scratch25:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch25_t;

#define SCRATCH26_OFFSET 0x104
#define SCRATCH26_RESET  0x00000000
typedef union scratch26_u {
    struct {
        unsigned int scratch26:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch26_t;

#define SCRATCH27_OFFSET 0x108
#define SCRATCH27_RESET  0x00000000
typedef union scratch27_u {
    struct {
        unsigned int scratch27:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch27_t;

#define SCRATCH28_OFFSET 0x10C
#define SCRATCH28_RESET  0x00000000
typedef union scratch28_u {
    struct {
        unsigned int scratch28:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch28_t;

#define SCRATCH29_OFFSET 0x110
#define SCRATCH29_RESET  0x00000000
typedef union scratch29_u {
    struct {
        unsigned int scratch29:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch29_t;

#define SCRATCH30_OFFSET 0x114
#define SCRATCH30_RESET  0x00000000
typedef union scratch30_u {
    struct {
        unsigned int scratch30:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch30_t;

#define SCRATCH31_OFFSET 0x118
#define SCRATCH31_RESET  0x00000000
typedef union scratch31_u {
    struct {
        unsigned int scratch31:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch31_t;

#define SCRATCH32_OFFSET 0x11C
#define SCRATCH32_RESET  0x00000000
typedef union scratch32_u {
    struct {
        unsigned int scratch32:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch32_t;

#define SCRATCH33_OFFSET 0x120
#define SCRATCH33_RESET  0x00000000
typedef union scratch33_u {
    struct {
        unsigned int scratch33:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch33_t;

#define SCRATCH34_OFFSET 0x124
#define SCRATCH34_RESET  0x00000000
typedef union scratch34_u {
    struct {
        unsigned int scratch34:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch34_t;

#define SCRATCH35_OFFSET 0x128
#define SCRATCH35_RESET  0x00000000
typedef union scratch35_u {
    struct {
        unsigned int scratch35:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch35_t;

#define SCRATCH36_OFFSET 0x12C
#define SCRATCH36_RESET  0x00000000
typedef union scratch36_u {
    struct {
        unsigned int scratch36:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch36_t;

#define SCRATCH37_OFFSET 0x130
#define SCRATCH37_RESET  0x00000000
typedef union scratch37_u {
    struct {
        unsigned int scratch37:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch37_t;

#define SCRATCH38_OFFSET 0x134
#define SCRATCH38_RESET  0x00000000
typedef union scratch38_u {
    struct {
        unsigned int scratch38:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch38_t;

#define SCRATCH39_OFFSET 0x138
#define SCRATCH39_RESET  0x00000000
typedef union scratch39_u {
    struct {
        unsigned int scratch39:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch39_t;

#define SCRATCH40_OFFSET 0x13C
#define SCRATCH40_RESET  0x00000000
typedef union scratch40_u {
    struct {
        unsigned int scratch40:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch40_t;

#define SCRATCH41_OFFSET 0x140
#define SCRATCH41_RESET  0x00000000
typedef union scratch41_u {
    struct {
        unsigned int scratch41:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch41_t;

#define SCRATCH42_OFFSET 0x144
#define SCRATCH42_RESET  0x00000000
typedef union scratch42_u {
    struct {
        unsigned int scratch42:32;          /* General purpose register storage */
    };

    uint32_t reg32;
} scratch42_t;

#define BONDOUT_MIRROR0_OFFSET 0x148
#define BONDOUT_MIRROR0_RESET  0x00000000
typedef union bondout_mirror0_u {
    struct {
        unsigned int bondout_mirror0:32;
    };

    uint32_t reg32;
} bondout_mirror0_t;

#define BONDOUT_MIRROR1_OFFSET 0x14C
#define BONDOUT_MIRROR1_RESET  0x00000000
typedef union bondout_mirror1_u {
    struct {
        unsigned int bondout_mirror1:32;
    };

    uint32_t reg32;
} bondout_mirror1_t;

#define BONDOUT_MIRROR2_OFFSET 0x150
#define BONDOUT_MIRROR2_RESET  0x00000000
typedef union bondout_mirror2_u {
    struct {
        unsigned int bondout_mirror2:32;
    };

    uint32_t reg32;
} bondout_mirror2_t;

#define SYS_33V_EN_OFFSET 0x154
#define SYS_33V_EN_RESET  0x00000000
typedef union sys_33v_en_u {
    struct {
        unsigned int val:1;                 /* 1 = 3.3v 0 = 1.8v */
        unsigned int undefined_bits_1_31:31;
    };

    uint32_t reg32;
} sys_33v_en_t;

#define BONDOUT_MIRROR_ACCESS_OFFSET 0x158
#define BONDOUT_MIRROR_ACCESS_RESET  0x00000000
typedef union bondout_mirror_access_u {
    struct {
        unsigned int bwrite:1;              /* disable write to bondout secure registers 0 = OFF 1 = ON */
        unsigned int bread:1;               /* disable read from bondout secure registers 0 = OFF 1 = ON */
        unsigned int undefined_bits_2_31:30;
    };

    uint32_t reg32;
} bondout_mirror_access_t;

#define GATE_OFFSET 0x15C
#define GATE_RESET  0x00000000
typedef union gate_u {
    struct {
        unsigned int gate_dbns:1;           /* 0 = OFF 1 = ON */
        unsigned int gate_wake:1;           /* 0 = OFF 1 = ON */
        unsigned int undefined_bits_2_31:30;
    };

    uint32_t reg32;
} gate_t;

#endif // TEGRA_PMC_H
